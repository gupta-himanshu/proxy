/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.10.75
 * apibuilder 0.15.33 app.apibuilder.io/flow/organization/latest/play_2_8_client
 */
package io.flow.organization.v0.models {

  /**
   * The Country Picker manages the configuration of your country picker.
   */

  final case class CountryPicker(
    id: String,
    source: io.flow.organization.v0.models.CountryPickerSource
  )

  final case class CountryPickerForm(
    source: io.flow.organization.v0.models.CountryPickerSource = io.flow.organization.v0.models.CountryPickerSource.Experience
  )

  /**
   * The Ecommerce Platform defines what the organization is using for their
   * ecommerce systems.
   *
   * @param version The version of the platform where appropriate. For platform types like shopify
   *        that are fully hosted, version does not apply and thus is optional
   */

  final case class EcommercePlatform(
    id: String,
    `type`: io.flow.organization.v0.models.EcommercePlatformType,
    version: _root_.scala.Option[String] = None
  )

  /**
   * @param version The version of the platform where appropriate. For platform types like shopify
   *        that are fully hosted, version does not apply and thus is optional
   */

  final case class EcommercePlatformForm(
    `type`: io.flow.organization.v0.models.EcommercePlatformType,
    version: _root_.scala.Option[String] = None
  )

  /**
   * An invitation via email to a user to join this organization. The user will then
   * walk through a user login/registration process and will immediately become a
   * member of the organization.
   *
   * @param email The email address to which we send this invitation
   * @param roles The desired role(s) this user will play for the organization
   * @param expiration The date / time on which this token expires. Current default is for tokens to
   *        live for 1 week
   */

  final case class Invitation(
    id: String,
    organization: io.flow.common.v0.models.ExpandableOrganization,
    email: String,
    name: io.flow.common.v0.models.Name,
    @deprecated("Static roles are being deprecated for role-based permissions.") role: _root_.scala.Option[io.flow.common.v0.models.Role] = None,
    roles: _root_.scala.Option[Seq[io.flow.permission.v0.models.FlowRole]] = None,
    expiration: _root_.org.joda.time.DateTime
  )

  /**
   * Returns information as to why a particular invitation could not be accepted.
   */

  final case class InvitationError(
    code: io.flow.organization.v0.models.InvitationErrorCode,
    messages: Seq[String]
  )

  /**
   * @param roles The desired role(s) this user will play for the organization
   */

  final case class InvitationForm(
    organization: String,
    email: String,
    name: _root_.scala.Option[io.flow.common.v0.models.Name] = None,
    @deprecated("Static roles are being deprecated for role-based permissions.") role: io.flow.common.v0.models.Role = io.flow.common.v0.models.Role.Member,
    roles: _root_.scala.Option[Seq[io.flow.permission.v0.models.FlowRole]] = None
  )

  final case class InvitationVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    invitation: io.flow.organization.v0.models.Invitation
  )

  /**
   * Represents the users that are part of this organization. Primary purpose is to
   * manage which users have access to the organization's data and to provide a
   * simple user interface to assign roles and permissions to each member of the
   * organization
   *
   * @param roles The desired role(s) this user will play for the organization
   */

  final case class Membership(
    id: String,
    organization: io.flow.common.v0.models.ExpandableOrganization,
    user: io.flow.common.v0.models.ExpandableUser,
    @deprecated("Static roles are being deprecated for role-based permissions.") role: _root_.scala.Option[io.flow.common.v0.models.Role] = None,
    roles: Seq[io.flow.permission.v0.models.FlowRole]
  )

  /**
   * Top level resource to create a membership.
   *
   * @param organization The id of the organization
   * @param user The id of the user to add to this organization
   * @param roles The desired role(s) this user will play for the organization
   */

  final case class MembershipForm(
    organization: String,
    user: String,
    @deprecated("Static roles are being deprecated for role-based permissions.") role: io.flow.common.v0.models.Role = io.flow.common.v0.models.Role.Member,
    roles: Seq[io.flow.permission.v0.models.FlowRole] = Nil
  )

  /**
   * Top level resource to update a membership.
   *
   * @param roles The desired role(s) this user will play for the organization
   */

  final case class MembershipPutForm(
    @deprecated("Static roles are being deprecated for role-based permissions.") role: io.flow.common.v0.models.Role = io.flow.common.v0.models.Role.Member,
    roles: Seq[io.flow.permission.v0.models.FlowRole] = Nil
  )

  final case class MembershipVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    membership: io.flow.organization.v0.models.Membership
  )

  /**
   * Defines the data used for broad authorization of user access to org level data
   */

  final case class OrganizationAuthorization(
    @deprecated("Static roles are being deprecated for role-based permissions.") role: _root_.scala.Option[io.flow.common.v0.models.Role] = None,
    environment: io.flow.common.v0.models.Environment
  )

  final case class OrganizationAuthorizationForm(
    organization: String,
    environment: io.flow.common.v0.models.Environment
  )

  final case class OrganizationConfigurationReference(
    id: String
  )

  final case class OrganizationDefaultConfigurations(
    id: String,
    checkoutConfiguration: io.flow.organization.v0.models.OrganizationConfigurationReference
  )

  final case class OrganizationDefaultConfigurationsForm(
    id: String
  )

  /**
   * Either id or name is required.
   *
   * @param id Defaults to a URL safe and unique version of the name
   * @param name Defaults to the id
   * @param parentId When creating an organization in the test environment, you must specify your
   *        production organization id.
   * @param defaults Used to override (if needed) the geolocation-based organization defaults
   */

  final case class OrganizationForm(
    id: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[String] = None,
    environment: io.flow.common.v0.models.Environment = io.flow.common.v0.models.Environment.Production,
    parentId: _root_.scala.Option[String] = None,
    defaults: _root_.scala.Option[io.flow.common.v0.models.OrganizationDefaults] = None,
    status: io.flow.common.v0.models.OrganizationStatus = io.flow.common.v0.models.OrganizationStatus.Active
  )

  /**
   * Data required to upsert an organization.
   *
   * @param name Defaults to the id
   * @param environment If updating, defaults to the current environment. If creating, defaults to
   *        production
   * @param parentId When creating an organization in the test environment, you must specify your
   *        production organization id.
   * @param defaults Used to override (if needed) the geolocation-based organization defaults
   */

  final case class OrganizationPutForm(
    name: _root_.scala.Option[String] = None,
    environment: _root_.scala.Option[io.flow.common.v0.models.Environment] = None,
    parentId: _root_.scala.Option[String] = None,
    defaults: _root_.scala.Option[io.flow.common.v0.models.OrganizationDefaults] = None,
    status: io.flow.common.v0.models.OrganizationStatus = io.flow.common.v0.models.OrganizationStatus.Active
  )

  /**
   * A short identifier for an organization that is used to setup account IDs,
   * invoice Prefixes, etc.
   */

  final case class OrganizationShortId(
    id: String,
    organization: io.flow.common.v0.models.OrganizationReference,
    shortId: String
  )

  final case class OrganizationVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    organization: io.flow.common.v0.models.Organization
  )

  final case class RegionSetting(
    id: String,
    region: String,
    status: io.flow.common.v0.models.AvailabilityStatus
  )

  final case class RegionSettingForm(
    status: io.flow.common.v0.models.AvailabilityStatus
  )
  sealed trait CountryPickerSource extends _root_.scala.Product with _root_.scala.Serializable

  object CountryPickerSource {

    /**
     * Indicates we should build the list of countries based on each active experience
     * country
     */
    case object Experience extends CountryPickerSource {
      override def toString = "experience"
    }
    /**
     * Indicates we should build the list of countries based on all countries to which
     * you have a rate card (ie. all valid destination countries)
     */
    case object Destination extends CountryPickerSource {
      override def toString = "destination"
    }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends CountryPickerSource

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[CountryPickerSource] = scala.List(Experience, Destination)

    private[this]
    val byName: Map[String, CountryPickerSource] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): CountryPickerSource = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[CountryPickerSource] = byName.get(value.toLowerCase)

  }

  sealed trait EcommercePlatformType extends _root_.scala.Product with _root_.scala.Serializable

  object EcommercePlatformType {

    case object Commercetools extends EcommercePlatformType { override def toString = "commercetools" }
    case object Custom extends EcommercePlatformType { override def toString = "custom" }
    case object Hybris extends EcommercePlatformType { override def toString = "hybris" }
    case object Magento extends EcommercePlatformType { override def toString = "magento" }
    case object Shopify extends EcommercePlatformType { override def toString = "shopify" }
    /**
     * Indicates that the organization is participating in the Shopify Markets channel
     * - See
     */
    case object ShopifyMarkets extends EcommercePlatformType {
      override def toString = "shopify_markets"
    }
    case object Sfcc extends EcommercePlatformType { override def toString = "sfcc" }
    case object Solidus extends EcommercePlatformType { override def toString = "solidus" }
    case object Workarea extends EcommercePlatformType { override def toString = "workarea" }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends EcommercePlatformType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[EcommercePlatformType] = scala.List(Commercetools, Custom, Hybris, Magento, Shopify, ShopifyMarkets, Sfcc, Solidus, Workarea)

    private[this]
    val byName: Map[String, EcommercePlatformType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): EcommercePlatformType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[EcommercePlatformType] = byName.get(value.toLowerCase)

  }

  sealed trait InvitationErrorCode extends _root_.scala.Product with _root_.scala.Serializable

  object InvitationErrorCode {

    case object Expired extends InvitationErrorCode { override def toString = "expired" }
    case object InvalidEmail extends InvitationErrorCode { override def toString = "invalid_email" }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends InvitationErrorCode

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[InvitationErrorCode] = scala.List(Expired, InvalidEmail)

    private[this]
    val byName: Map[String, InvitationErrorCode] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): InvitationErrorCode = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[InvitationErrorCode] = byName.get(value.toLowerCase)

  }

}

package io.flow.organization.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.organization.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.reference.v0.models.json._

    private[v0] implicit val jsonReadsUUID: play.api.libs.json.Reads[_root_.java.util.UUID] = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID: play.api.libs.json.Writes[_root_.java.util.UUID] = (x: _root_.java.util.UUID) => play.api.libs.json.JsString(x.toString)

    private[v0] implicit val jsonReadsJodaDateTime: play.api.libs.json.Reads[_root_.org.joda.time.DateTime] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime: play.api.libs.json.Writes[_root_.org.joda.time.DateTime] = (x: _root_.org.joda.time.DateTime) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
    }

    private[v0] implicit val jsonReadsJodaLocalDate: play.api.libs.json.Reads[_root_.org.joda.time.LocalDate] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate: play.api.libs.json.Writes[_root_.org.joda.time.LocalDate] = (x: _root_.org.joda.time.LocalDate) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
    }

    implicit val jsonReadsOrganizationCountryPickerSource: play.api.libs.json.Reads[io.flow.organization.v0.models.CountryPickerSource] = new play.api.libs.json.Reads[io.flow.organization.v0.models.CountryPickerSource] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.organization.v0.models.CountryPickerSource] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.organization.v0.models.CountryPickerSource(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.organization.v0.models.CountryPickerSource(v))
              case err: play.api.libs.json.JsError =>
                (js \ "country_picker_source").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.organization.v0.models.CountryPickerSource(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesOrganizationCountryPickerSource(obj: io.flow.organization.v0.models.CountryPickerSource) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectCountryPickerSource(obj: io.flow.organization.v0.models.CountryPickerSource) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOrganizationCountryPickerSource: play.api.libs.json.Writes[CountryPickerSource] = {
      (obj: io.flow.organization.v0.models.CountryPickerSource) => {
        jsonWritesOrganizationCountryPickerSource(obj)
      }
    }

    implicit val jsonReadsOrganizationEcommercePlatformType: play.api.libs.json.Reads[io.flow.organization.v0.models.EcommercePlatformType] = new play.api.libs.json.Reads[io.flow.organization.v0.models.EcommercePlatformType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.organization.v0.models.EcommercePlatformType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.organization.v0.models.EcommercePlatformType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.organization.v0.models.EcommercePlatformType(v))
              case err: play.api.libs.json.JsError =>
                (js \ "ecommerce_platform_type").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.organization.v0.models.EcommercePlatformType(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesOrganizationEcommercePlatformType(obj: io.flow.organization.v0.models.EcommercePlatformType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectEcommercePlatformType(obj: io.flow.organization.v0.models.EcommercePlatformType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOrganizationEcommercePlatformType: play.api.libs.json.Writes[EcommercePlatformType] = {
      (obj: io.flow.organization.v0.models.EcommercePlatformType) => {
        jsonWritesOrganizationEcommercePlatformType(obj)
      }
    }

    implicit val jsonReadsOrganizationInvitationErrorCode: play.api.libs.json.Reads[io.flow.organization.v0.models.InvitationErrorCode] = new play.api.libs.json.Reads[io.flow.organization.v0.models.InvitationErrorCode] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.organization.v0.models.InvitationErrorCode] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.organization.v0.models.InvitationErrorCode(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.organization.v0.models.InvitationErrorCode(v))
              case err: play.api.libs.json.JsError =>
                (js \ "invitation_error_code").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.organization.v0.models.InvitationErrorCode(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesOrganizationInvitationErrorCode(obj: io.flow.organization.v0.models.InvitationErrorCode) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectInvitationErrorCode(obj: io.flow.organization.v0.models.InvitationErrorCode) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOrganizationInvitationErrorCode: play.api.libs.json.Writes[InvitationErrorCode] = {
      (obj: io.flow.organization.v0.models.InvitationErrorCode) => {
        jsonWritesOrganizationInvitationErrorCode(obj)
      }
    }

    implicit def jsonReadsOrganizationCountryPicker: play.api.libs.json.Reads[CountryPicker] = {
      for {
        id <- (__ \ "id").read[String]
        source <- (__ \ "source").read[io.flow.organization.v0.models.CountryPickerSource]
      } yield CountryPicker(id, source)
    }

    def jsObjectCountryPicker(obj: io.flow.organization.v0.models.CountryPicker): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "source" -> play.api.libs.json.JsString(obj.source.toString)
      )
    }

    implicit def jsonWritesOrganizationCountryPicker: play.api.libs.json.Writes[CountryPicker] = {
      (obj: io.flow.organization.v0.models.CountryPicker) => {
        jsObjectCountryPicker(obj)
      }
    }

    implicit def jsonReadsOrganizationCountryPickerForm: play.api.libs.json.Reads[CountryPickerForm] = {
      (__ \ "source").read[io.flow.organization.v0.models.CountryPickerSource].map { x => new CountryPickerForm(source = x) }
    }

    def jsObjectCountryPickerForm(obj: io.flow.organization.v0.models.CountryPickerForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "source" -> play.api.libs.json.JsString(obj.source.toString)
      )
    }

    implicit def jsonWritesOrganizationCountryPickerForm: play.api.libs.json.Writes[CountryPickerForm] = {
      (obj: io.flow.organization.v0.models.CountryPickerForm) => {
        jsObjectCountryPickerForm(obj)
      }
    }

    implicit def jsonReadsOrganizationEcommercePlatform: play.api.libs.json.Reads[EcommercePlatform] = {
      for {
        id <- (__ \ "id").read[String]
        `type` <- (__ \ "type").read[io.flow.organization.v0.models.EcommercePlatformType]
        version <- (__ \ "version").readNullable[String]
      } yield EcommercePlatform(id, `type`, version)
    }

    def jsObjectEcommercePlatform(obj: io.flow.organization.v0.models.EcommercePlatform): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString)
      ) ++ (obj.version match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("version" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesOrganizationEcommercePlatform: play.api.libs.json.Writes[EcommercePlatform] = {
      (obj: io.flow.organization.v0.models.EcommercePlatform) => {
        jsObjectEcommercePlatform(obj)
      }
    }

    implicit def jsonReadsOrganizationEcommercePlatformForm: play.api.libs.json.Reads[EcommercePlatformForm] = {
      for {
        `type` <- (__ \ "type").read[io.flow.organization.v0.models.EcommercePlatformType]
        version <- (__ \ "version").readNullable[String]
      } yield EcommercePlatformForm(`type`, version)
    }

    def jsObjectEcommercePlatformForm(obj: io.flow.organization.v0.models.EcommercePlatformForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString)
      ) ++ (obj.version match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("version" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesOrganizationEcommercePlatformForm: play.api.libs.json.Writes[EcommercePlatformForm] = {
      (obj: io.flow.organization.v0.models.EcommercePlatformForm) => {
        jsObjectEcommercePlatformForm(obj)
      }
    }

    implicit def jsonReadsOrganizationInvitation: play.api.libs.json.Reads[Invitation] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.common.v0.models.ExpandableOrganization]
        email <- (__ \ "email").read[String]
        name <- (__ \ "name").read[io.flow.common.v0.models.Name]
        role <- (__ \ "role").readNullable[io.flow.common.v0.models.Role]
        roles <- (__ \ "roles").readNullable[Seq[io.flow.permission.v0.models.FlowRole]]
        expiration <- (__ \ "expiration").read[_root_.org.joda.time.DateTime]
      } yield Invitation(id, organization, email, name, role, roles, expiration)
    }

    def jsObjectInvitation(obj: io.flow.organization.v0.models.Invitation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> io.flow.common.v0.models.json.jsObjectExpandableOrganization(obj.organization),
        "email" -> play.api.libs.json.JsString(obj.email),
        "name" -> io.flow.common.v0.models.json.jsObjectName(obj.name),
        "expiration" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.expiration))
      ) ++ (obj.role match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("role" -> play.api.libs.json.JsString(x.toString))
      }) ++
      (obj.roles match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("roles" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesOrganizationInvitation: play.api.libs.json.Writes[Invitation] = {
      (obj: io.flow.organization.v0.models.Invitation) => {
        jsObjectInvitation(obj)
      }
    }

    implicit def jsonReadsOrganizationInvitationError: play.api.libs.json.Reads[InvitationError] = {
      for {
        code <- (__ \ "code").read[io.flow.organization.v0.models.InvitationErrorCode]
        messages <- (__ \ "messages").read[Seq[String]]
      } yield InvitationError(code, messages)
    }

    def jsObjectInvitationError(obj: io.flow.organization.v0.models.InvitationError): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code.toString),
        "messages" -> play.api.libs.json.Json.toJson(obj.messages)
      )
    }

    implicit def jsonWritesOrganizationInvitationError: play.api.libs.json.Writes[InvitationError] = {
      (obj: io.flow.organization.v0.models.InvitationError) => {
        jsObjectInvitationError(obj)
      }
    }

    implicit def jsonReadsOrganizationInvitationForm: play.api.libs.json.Reads[InvitationForm] = {
      for {
        organization <- (__ \ "organization").read[String]
        email <- (__ \ "email").read[String]
        name <- (__ \ "name").readNullable[io.flow.common.v0.models.Name]
        role <- (__ \ "role").readWithDefault[io.flow.common.v0.models.Role](io.flow.common.v0.models.Role.Member)
        roles <- (__ \ "roles").readNullable[Seq[io.flow.permission.v0.models.FlowRole]]
      } yield InvitationForm(organization, email, name, role, roles)
    }

    def jsObjectInvitationForm(obj: io.flow.organization.v0.models.InvitationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "email" -> play.api.libs.json.JsString(obj.email),
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> io.flow.common.v0.models.json.jsObjectName(x))
      }) ++
      (obj.roles match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("roles" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesOrganizationInvitationForm: play.api.libs.json.Writes[InvitationForm] = {
      (obj: io.flow.organization.v0.models.InvitationForm) => {
        jsObjectInvitationForm(obj)
      }
    }

    implicit def jsonReadsOrganizationInvitationVersion: play.api.libs.json.Reads[InvitationVersion] = {
      for {
        id <- (__ \ "id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        `type` <- (__ \ "type").read[io.flow.common.v0.models.ChangeType]
        invitation <- (__ \ "invitation").read[io.flow.organization.v0.models.Invitation]
      } yield InvitationVersion(id, timestamp, `type`, invitation)
    }

    def jsObjectInvitationVersion(obj: io.flow.organization.v0.models.InvitationVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "invitation" -> jsObjectInvitation(obj.invitation)
      )
    }

    implicit def jsonWritesOrganizationInvitationVersion: play.api.libs.json.Writes[InvitationVersion] = {
      (obj: io.flow.organization.v0.models.InvitationVersion) => {
        jsObjectInvitationVersion(obj)
      }
    }

    implicit def jsonReadsOrganizationMembership: play.api.libs.json.Reads[Membership] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.common.v0.models.ExpandableOrganization]
        user <- (__ \ "user").read[io.flow.common.v0.models.ExpandableUser]
        role <- (__ \ "role").readNullable[io.flow.common.v0.models.Role]
        roles <- (__ \ "roles").read[Seq[io.flow.permission.v0.models.FlowRole]]
      } yield Membership(id, organization, user, role, roles)
    }

    def jsObjectMembership(obj: io.flow.organization.v0.models.Membership): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> io.flow.common.v0.models.json.jsObjectExpandableOrganization(obj.organization),
        "user" -> io.flow.common.v0.models.json.jsObjectExpandableUser(obj.user),
        "roles" -> play.api.libs.json.Json.toJson(obj.roles)
      ) ++ (obj.role match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("role" -> play.api.libs.json.JsString(x.toString))
      })
    }

    implicit def jsonWritesOrganizationMembership: play.api.libs.json.Writes[Membership] = {
      (obj: io.flow.organization.v0.models.Membership) => {
        jsObjectMembership(obj)
      }
    }

    implicit def jsonReadsOrganizationMembershipForm: play.api.libs.json.Reads[MembershipForm] = {
      for {
        organization <- (__ \ "organization").read[String]
        user <- (__ \ "user").read[String]
        role <- (__ \ "role").readWithDefault[io.flow.common.v0.models.Role](io.flow.common.v0.models.Role.Member)
        roles <- (__ \ "roles").readWithDefault[Seq[io.flow.permission.v0.models.FlowRole]](Nil)
      } yield MembershipForm(organization, user, role, roles)
    }

    def jsObjectMembershipForm(obj: io.flow.organization.v0.models.MembershipForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "user" -> play.api.libs.json.JsString(obj.user),
        "role" -> play.api.libs.json.JsString(obj.role.toString),
        "roles" -> play.api.libs.json.Json.toJson(obj.roles)
      )
    }

    implicit def jsonWritesOrganizationMembershipForm: play.api.libs.json.Writes[MembershipForm] = {
      (obj: io.flow.organization.v0.models.MembershipForm) => {
        jsObjectMembershipForm(obj)
      }
    }

    implicit def jsonReadsOrganizationMembershipPutForm: play.api.libs.json.Reads[MembershipPutForm] = {
      for {
        role <- (__ \ "role").readWithDefault[io.flow.common.v0.models.Role](io.flow.common.v0.models.Role.Member)
        roles <- (__ \ "roles").readWithDefault[Seq[io.flow.permission.v0.models.FlowRole]](Nil)
      } yield MembershipPutForm(role, roles)
    }

    def jsObjectMembershipPutForm(obj: io.flow.organization.v0.models.MembershipPutForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "role" -> play.api.libs.json.JsString(obj.role.toString),
        "roles" -> play.api.libs.json.Json.toJson(obj.roles)
      )
    }

    implicit def jsonWritesOrganizationMembershipPutForm: play.api.libs.json.Writes[MembershipPutForm] = {
      (obj: io.flow.organization.v0.models.MembershipPutForm) => {
        jsObjectMembershipPutForm(obj)
      }
    }

    implicit def jsonReadsOrganizationMembershipVersion: play.api.libs.json.Reads[MembershipVersion] = {
      for {
        id <- (__ \ "id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        `type` <- (__ \ "type").read[io.flow.common.v0.models.ChangeType]
        membership <- (__ \ "membership").read[io.flow.organization.v0.models.Membership]
      } yield MembershipVersion(id, timestamp, `type`, membership)
    }

    def jsObjectMembershipVersion(obj: io.flow.organization.v0.models.MembershipVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "membership" -> jsObjectMembership(obj.membership)
      )
    }

    implicit def jsonWritesOrganizationMembershipVersion: play.api.libs.json.Writes[MembershipVersion] = {
      (obj: io.flow.organization.v0.models.MembershipVersion) => {
        jsObjectMembershipVersion(obj)
      }
    }

    implicit def jsonReadsOrganizationOrganizationAuthorization: play.api.libs.json.Reads[OrganizationAuthorization] = {
      for {
        role <- (__ \ "role").readNullable[io.flow.common.v0.models.Role]
        environment <- (__ \ "environment").read[io.flow.common.v0.models.Environment]
      } yield OrganizationAuthorization(role, environment)
    }

    def jsObjectOrganizationAuthorization(obj: io.flow.organization.v0.models.OrganizationAuthorization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      ) ++ (obj.role match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("role" -> play.api.libs.json.JsString(x.toString))
      })
    }

    implicit def jsonWritesOrganizationOrganizationAuthorization: play.api.libs.json.Writes[OrganizationAuthorization] = {
      (obj: io.flow.organization.v0.models.OrganizationAuthorization) => {
        jsObjectOrganizationAuthorization(obj)
      }
    }

    implicit def jsonReadsOrganizationOrganizationAuthorizationForm: play.api.libs.json.Reads[OrganizationAuthorizationForm] = {
      for {
        organization <- (__ \ "organization").read[String]
        environment <- (__ \ "environment").read[io.flow.common.v0.models.Environment]
      } yield OrganizationAuthorizationForm(organization, environment)
    }

    def jsObjectOrganizationAuthorizationForm(obj: io.flow.organization.v0.models.OrganizationAuthorizationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      )
    }

    implicit def jsonWritesOrganizationOrganizationAuthorizationForm: play.api.libs.json.Writes[OrganizationAuthorizationForm] = {
      (obj: io.flow.organization.v0.models.OrganizationAuthorizationForm) => {
        jsObjectOrganizationAuthorizationForm(obj)
      }
    }

    implicit def jsonReadsOrganizationOrganizationConfigurationReference: play.api.libs.json.Reads[OrganizationConfigurationReference] = {
      (__ \ "id").read[String].map { x => new OrganizationConfigurationReference(id = x) }
    }

    def jsObjectOrganizationConfigurationReference(obj: io.flow.organization.v0.models.OrganizationConfigurationReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesOrganizationOrganizationConfigurationReference: play.api.libs.json.Writes[OrganizationConfigurationReference] = {
      (obj: io.flow.organization.v0.models.OrganizationConfigurationReference) => {
        jsObjectOrganizationConfigurationReference(obj)
      }
    }

    implicit def jsonReadsOrganizationOrganizationDefaultConfigurations: play.api.libs.json.Reads[OrganizationDefaultConfigurations] = {
      for {
        id <- (__ \ "id").read[String]
        checkoutConfiguration <- (__ \ "checkout_configuration").read[io.flow.organization.v0.models.OrganizationConfigurationReference]
      } yield OrganizationDefaultConfigurations(id, checkoutConfiguration)
    }

    def jsObjectOrganizationDefaultConfigurations(obj: io.flow.organization.v0.models.OrganizationDefaultConfigurations): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "checkout_configuration" -> jsObjectOrganizationConfigurationReference(obj.checkoutConfiguration)
      )
    }

    implicit def jsonWritesOrganizationOrganizationDefaultConfigurations: play.api.libs.json.Writes[OrganizationDefaultConfigurations] = {
      (obj: io.flow.organization.v0.models.OrganizationDefaultConfigurations) => {
        jsObjectOrganizationDefaultConfigurations(obj)
      }
    }

    implicit def jsonReadsOrganizationOrganizationDefaultConfigurationsForm: play.api.libs.json.Reads[OrganizationDefaultConfigurationsForm] = {
      (__ \ "id").read[String].map { x => new OrganizationDefaultConfigurationsForm(id = x) }
    }

    def jsObjectOrganizationDefaultConfigurationsForm(obj: io.flow.organization.v0.models.OrganizationDefaultConfigurationsForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesOrganizationOrganizationDefaultConfigurationsForm: play.api.libs.json.Writes[OrganizationDefaultConfigurationsForm] = {
      (obj: io.flow.organization.v0.models.OrganizationDefaultConfigurationsForm) => {
        jsObjectOrganizationDefaultConfigurationsForm(obj)
      }
    }

    implicit def jsonReadsOrganizationOrganizationForm: play.api.libs.json.Reads[OrganizationForm] = {
      for {
        id <- (__ \ "id").readNullable[String]
        name <- (__ \ "name").readNullable[String]
        environment <- (__ \ "environment").read[io.flow.common.v0.models.Environment]
        parentId <- (__ \ "parent_id").readNullable[String]
        defaults <- (__ \ "defaults").readNullable[io.flow.common.v0.models.OrganizationDefaults]
        status <- (__ \ "status").readWithDefault[io.flow.common.v0.models.OrganizationStatus](io.flow.common.v0.models.OrganizationStatus.Active)
      } yield OrganizationForm(id, name, environment, parentId, defaults, status)
    }

    def jsObjectOrganizationForm(obj: io.flow.organization.v0.models.OrganizationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "environment" -> play.api.libs.json.JsString(obj.environment.toString),
        "status" -> play.api.libs.json.JsString(obj.status.toString)
      ) ++ (obj.id match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("id" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.parentId match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("parent_id" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.defaults match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("defaults" -> io.flow.common.v0.models.json.jsObjectOrganizationDefaults(x))
      })
    }

    implicit def jsonWritesOrganizationOrganizationForm: play.api.libs.json.Writes[OrganizationForm] = {
      (obj: io.flow.organization.v0.models.OrganizationForm) => {
        jsObjectOrganizationForm(obj)
      }
    }

    implicit def jsonReadsOrganizationOrganizationPutForm: play.api.libs.json.Reads[OrganizationPutForm] = {
      for {
        name <- (__ \ "name").readNullable[String]
        environment <- (__ \ "environment").readNullable[io.flow.common.v0.models.Environment]
        parentId <- (__ \ "parent_id").readNullable[String]
        defaults <- (__ \ "defaults").readNullable[io.flow.common.v0.models.OrganizationDefaults]
        status <- (__ \ "status").readWithDefault[io.flow.common.v0.models.OrganizationStatus](io.flow.common.v0.models.OrganizationStatus.Active)
      } yield OrganizationPutForm(name, environment, parentId, defaults, status)
    }

    def jsObjectOrganizationPutForm(obj: io.flow.organization.v0.models.OrganizationPutForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.JsString(obj.status.toString)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.environment match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("environment" -> play.api.libs.json.JsString(x.toString))
      }) ++
      (obj.parentId match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("parent_id" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.defaults match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("defaults" -> io.flow.common.v0.models.json.jsObjectOrganizationDefaults(x))
      })
    }

    implicit def jsonWritesOrganizationOrganizationPutForm: play.api.libs.json.Writes[OrganizationPutForm] = {
      (obj: io.flow.organization.v0.models.OrganizationPutForm) => {
        jsObjectOrganizationPutForm(obj)
      }
    }

    implicit def jsonReadsOrganizationOrganizationShortId: play.api.libs.json.Reads[OrganizationShortId] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.common.v0.models.OrganizationReference]
        shortId <- (__ \ "short_id").read[String]
      } yield OrganizationShortId(id, organization, shortId)
    }

    def jsObjectOrganizationShortId(obj: io.flow.organization.v0.models.OrganizationShortId): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> io.flow.common.v0.models.json.jsObjectOrganizationReference(obj.organization),
        "short_id" -> play.api.libs.json.JsString(obj.shortId)
      )
    }

    implicit def jsonWritesOrganizationOrganizationShortId: play.api.libs.json.Writes[OrganizationShortId] = {
      (obj: io.flow.organization.v0.models.OrganizationShortId) => {
        jsObjectOrganizationShortId(obj)
      }
    }

    implicit def jsonReadsOrganizationOrganizationVersion: play.api.libs.json.Reads[OrganizationVersion] = {
      for {
        id <- (__ \ "id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        `type` <- (__ \ "type").read[io.flow.common.v0.models.ChangeType]
        organization <- (__ \ "organization").read[io.flow.common.v0.models.Organization]
      } yield OrganizationVersion(id, timestamp, `type`, organization)
    }

    def jsObjectOrganizationVersion(obj: io.flow.organization.v0.models.OrganizationVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "organization" -> io.flow.common.v0.models.json.jsObjectOrganization(obj.organization)
      )
    }

    implicit def jsonWritesOrganizationOrganizationVersion: play.api.libs.json.Writes[OrganizationVersion] = {
      (obj: io.flow.organization.v0.models.OrganizationVersion) => {
        jsObjectOrganizationVersion(obj)
      }
    }

    implicit def jsonReadsOrganizationRegionSetting: play.api.libs.json.Reads[RegionSetting] = {
      for {
        id <- (__ \ "id").read[String]
        region <- (__ \ "region").read[String]
        status <- (__ \ "status").read[io.flow.common.v0.models.AvailabilityStatus]
      } yield RegionSetting(id, region, status)
    }

    def jsObjectRegionSetting(obj: io.flow.organization.v0.models.RegionSetting): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "region" -> play.api.libs.json.JsString(obj.region),
        "status" -> play.api.libs.json.JsString(obj.status.toString)
      )
    }

    implicit def jsonWritesOrganizationRegionSetting: play.api.libs.json.Writes[RegionSetting] = {
      (obj: io.flow.organization.v0.models.RegionSetting) => {
        jsObjectRegionSetting(obj)
      }
    }

    implicit def jsonReadsOrganizationRegionSettingForm: play.api.libs.json.Reads[RegionSettingForm] = {
      (__ \ "status").read[io.flow.common.v0.models.AvailabilityStatus].map { x => new RegionSettingForm(status = x) }
    }

    def jsObjectRegionSettingForm(obj: io.flow.organization.v0.models.RegionSettingForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.JsString(obj.status.toString)
      )
    }

    implicit def jsonWritesOrganizationRegionSettingForm: play.api.libs.json.Writes[RegionSettingForm] = {
      (obj: io.flow.organization.v0.models.RegionSettingForm) => {
        jsObjectRegionSettingForm(obj)
      }
    }
  }
}

package io.flow.organization.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.flow.organization.v0.models._

      val countryPickerSourceConverter: ApibuilderTypeConverter[io.flow.organization.v0.models.CountryPickerSource] = new ApibuilderTypeConverter[io.flow.organization.v0.models.CountryPickerSource] {
        override def convert(value: String): io.flow.organization.v0.models.CountryPickerSource = io.flow.organization.v0.models.CountryPickerSource(value)
        override def convert(value: io.flow.organization.v0.models.CountryPickerSource): String = value.toString
        override def example: io.flow.organization.v0.models.CountryPickerSource = io.flow.organization.v0.models.CountryPickerSource.Experience
        override def validValues: Seq[io.flow.organization.v0.models.CountryPickerSource] = io.flow.organization.v0.models.CountryPickerSource.all
      }
      implicit def pathBindableCountryPickerSource(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.organization.v0.models.CountryPickerSource] = ApibuilderPathBindable(countryPickerSourceConverter)
      implicit def queryStringBindableCountryPickerSource(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.organization.v0.models.CountryPickerSource] = ApibuilderQueryStringBindable(countryPickerSourceConverter)

      val ecommercePlatformTypeConverter: ApibuilderTypeConverter[io.flow.organization.v0.models.EcommercePlatformType] = new ApibuilderTypeConverter[io.flow.organization.v0.models.EcommercePlatformType] {
        override def convert(value: String): io.flow.organization.v0.models.EcommercePlatformType = io.flow.organization.v0.models.EcommercePlatformType(value)
        override def convert(value: io.flow.organization.v0.models.EcommercePlatformType): String = value.toString
        override def example: io.flow.organization.v0.models.EcommercePlatformType = io.flow.organization.v0.models.EcommercePlatformType.Commercetools
        override def validValues: Seq[io.flow.organization.v0.models.EcommercePlatformType] = io.flow.organization.v0.models.EcommercePlatformType.all
      }
      implicit def pathBindableEcommercePlatformType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.organization.v0.models.EcommercePlatformType] = ApibuilderPathBindable(ecommercePlatformTypeConverter)
      implicit def queryStringBindableEcommercePlatformType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.organization.v0.models.EcommercePlatformType] = ApibuilderQueryStringBindable(ecommercePlatformTypeConverter)

      val invitationErrorCodeConverter: ApibuilderTypeConverter[io.flow.organization.v0.models.InvitationErrorCode] = new ApibuilderTypeConverter[io.flow.organization.v0.models.InvitationErrorCode] {
        override def convert(value: String): io.flow.organization.v0.models.InvitationErrorCode = io.flow.organization.v0.models.InvitationErrorCode(value)
        override def convert(value: io.flow.organization.v0.models.InvitationErrorCode): String = value.toString
        override def example: io.flow.organization.v0.models.InvitationErrorCode = io.flow.organization.v0.models.InvitationErrorCode.Expired
        override def validValues: Seq[io.flow.organization.v0.models.InvitationErrorCode] = io.flow.organization.v0.models.InvitationErrorCode.all
      }
      implicit def pathBindableInvitationErrorCode(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.organization.v0.models.InvitationErrorCode] = ApibuilderPathBindable(invitationErrorCodeConverter)
      implicit def queryStringBindableInvitationErrorCode(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.organization.v0.models.InvitationErrorCode] = ApibuilderQueryStringBindable(invitationErrorCodeConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.organization.v0 {

  object Constants {

    val Namespace = "io.flow.organization.v0"
    val UserAgent = "apibuilder 0.15.33 app.apibuilder.io/flow/organization/latest/play_2_8_client"
    val Version = "0.10.75"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.organization.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.organization.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.reference.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.organization.v0.Client")

    logger.info(s"Initializing io.flow.organization.v0.Client for url $baseUrl")

    def countryPickers: CountryPickers = CountryPickers

    def ecommercePlatforms: EcommercePlatforms = EcommercePlatforms

    def invitations: Invitations = Invitations

    def memberships: Memberships = Memberships

    def organizationAuthorizations: OrganizationAuthorizations = OrganizationAuthorizations

    def organizationDefaultConfigurations: OrganizationDefaultConfigurations = OrganizationDefaultConfigurations

    def organizations: Organizations = Organizations

    object CountryPickers extends CountryPickers {
      override def get(
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.CountryPicker] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/country/picker", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.CountryPicker", r, _.validate[io.flow.organization.v0.models.CountryPicker])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def put(
        organizationId: String,
        countryPickerForm: io.flow.organization.v0.models.CountryPickerForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.CountryPicker] = {
        val payload = play.api.libs.json.Json.toJson(countryPickerForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/country/picker", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.CountryPicker", r, _.validate[io.flow.organization.v0.models.CountryPicker])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404, 422")
        }
      }
    }

    object EcommercePlatforms extends EcommercePlatforms {
      override def get(
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.EcommercePlatform] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/ecommerce/platform", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.EcommercePlatform", r, _.validate[io.flow.organization.v0.models.EcommercePlatform])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def put(
        organizationId: String,
        ecommercePlatformForm: io.flow.organization.v0.models.EcommercePlatformForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.EcommercePlatform] = {
        val payload = play.api.libs.json.Json.toJson(ecommercePlatformForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/ecommerce/platform", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.EcommercePlatform", r, _.validate[io.flow.organization.v0.models.EcommercePlatform])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404, 422")
        }
      }
    }

    object Invitations extends Invitations {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[String] = None,
        email: _root_.scala.Option[String] = None,
        token: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "-created_at",
        expand: _root_.scala.Option[Seq[String]] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.Invitation]] = {
        val queryParameters = Seq(
          organization.map("organization" -> _),
          email.map("email" -> _),
          token.map("token" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/invitations", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.Invitation]", r, _.validate[Seq[io.flow.organization.v0.models.Invitation]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        invitation: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "journal_timestamp",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.InvitationVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          invitation.getOrElse(Nil).map("invitation" -> _)

        _executeRequest("GET", s"/invitations/versions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.InvitationVersion]", r, _.validate[Seq[io.flow.organization.v0.models.InvitationVersion]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403")
        }
      }

      override def getById(
        id: String,
        expand: _root_.scala.Option[Seq[String]] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation] = {
        val queryParameters = expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/invitations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Invitation", r, _.validate[io.flow.organization.v0.models.Invitation])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def post(
        invitationForm: io.flow.organization.v0.models.InvitationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation] = {
        val payload = play.api.libs.json.Json.toJson(invitationForm)

        _executeRequest("POST", s"/invitations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Invitation", r, _.validate[io.flow.organization.v0.models.Invitation])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 403, 422")
        }
      }

      override def getTokensByToken(
        token: String,
        expand: _root_.scala.Option[Seq[String]] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation] = {
        val queryParameters = expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/invitations/tokens/${play.utils.UriEncoding.encodePathSegment(token, "UTF-8")}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Invitation", r, _.validate[io.flow.organization.v0.models.Invitation])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def putTokensByToken(
        token: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership] = {
        _executeRequest("PUT", s"/invitations/tokens/${play.utils.UriEncoding.encodePathSegment(token, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Membership", r, _.validate[io.flow.organization.v0.models.Membership])
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Membership", r, _.validate[io.flow.organization.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.InvitationErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 403, 404, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/invitations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 403, 404, 422")
        }
      }
    }

    object Memberships extends Memberships {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        user: _root_.scala.Option[String] = None,
        organization: _root_.scala.Option[String] = None,
        role: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "-created_at",
        expand: _root_.scala.Option[Seq[String]] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.Membership]] = {
        val queryParameters = Seq(
          user.map("user" -> _),
          organization.map("organization" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          role.getOrElse(Nil).map("role" -> _) ++
          expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/memberships", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.Membership]", r, _.validate[Seq[io.flow.organization.v0.models.Membership]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        membership: _root_.scala.Option[Seq[String]] = None,
        user: _root_.scala.Option[String] = None,
        organization: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "journal_timestamp",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.MembershipVersion]] = {
        val queryParameters = Seq(
          user.map("user" -> _),
          organization.map("organization" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          membership.getOrElse(Nil).map("membership" -> _)

        _executeRequest("GET", s"/memberships/versions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.MembershipVersion]", r, _.validate[Seq[io.flow.organization.v0.models.MembershipVersion]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403")
        }
      }

      override def getById(
        id: String,
        expand: _root_.scala.Option[Seq[String]] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership] = {
        val queryParameters = expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Membership", r, _.validate[io.flow.organization.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def post(
        membershipForm: io.flow.organization.v0.models.MembershipForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership] = {
        val payload = play.api.libs.json.Json.toJson(membershipForm)

        _executeRequest("POST", s"/memberships", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Membership", r, _.validate[io.flow.organization.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 403, 422")
        }
      }

      override def putById(
        id: String,
        membershipPutForm: io.flow.organization.v0.models.MembershipPutForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership] = {
        val payload = play.api.libs.json.Json.toJson(membershipPutForm)

        _executeRequest("PUT", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Membership", r, _.validate[io.flow.organization.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 403, 404, 422")
        }
      }
    }

    object OrganizationAuthorizations extends OrganizationAuthorizations {
      @deprecated("Use GET /:organization/permission/checks")
      override def post(
        organizationAuthorizationForm: io.flow.organization.v0.models.OrganizationAuthorizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationAuthorization] = {
        val payload = play.api.libs.json.Json.toJson(organizationAuthorizationForm)

        _executeRequest("POST", s"/organization-authorizations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.OrganizationAuthorization", r, _.validate[io.flow.organization.v0.models.OrganizationAuthorization])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 422")
        }
      }

      @deprecated("Use GET /:organization/permission/checks")
      override def getByOrganization(
        organization: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationAuthorization] = {
        _executeRequest("GET", s"/organization-authorizations/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.OrganizationAuthorization", r, _.validate[io.flow.organization.v0.models.OrganizationAuthorization])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }
    }

    object OrganizationDefaultConfigurations extends OrganizationDefaultConfigurations {
      override def get(
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationDefaultConfigurations] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/default/configurations", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.OrganizationDefaultConfigurations", r, _.validate[io.flow.organization.v0.models.OrganizationDefaultConfigurations])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def putCheckout(
        organizationId: String,
        organizationDefaultConfigurationsForm: io.flow.organization.v0.models.OrganizationDefaultConfigurationsForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationDefaultConfigurations] = {
        val payload = play.api.libs.json.Json.toJson(organizationDefaultConfigurationsForm)

        _executeRequest("PUT", s"/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/default/configurations/checkout", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.OrganizationDefaultConfigurations", r, _.validate[io.flow.organization.v0.models.OrganizationDefaultConfigurations])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404, 422")
        }
      }
    }

    object Organizations extends Organizations {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        name: _root_.scala.Option[String] = None,
        environment: _root_.scala.Option[io.flow.common.v0.models.Environment] = None,
        parent: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "name",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.Organization]] = {
        val queryParameters = Seq(
          name.map("name" -> _),
          environment.map("environment" -> _.toString),
          parent.map("parent" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/organizations", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.common.v0.models.Organization]", r, _.validate[Seq[io.flow.common.v0.models.Organization]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "journal_timestamp",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.OrganizationVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          organization.getOrElse(Nil).map("organization" -> _)

        _executeRequest("GET", s"/organizations/versions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.OrganizationVersion]", r, _.validate[Seq[io.flow.organization.v0.models.OrganizationVersion]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403")
        }
      }

      override def getByOrganizationId(
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.common.v0.models.Organization", r, _.validate[io.flow.common.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def getSettingsAndCurrenciesByOrganizationId(
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Currency]] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/settings/currencies", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.reference.v0.models.Currency]", r, _.validate[Seq[io.flow.reference.v0.models.Currency]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def getSettingsAndRegionsAndCountriesAndAvailableByOrganizationId(
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Country]] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/settings/regions/countries/available", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.reference.v0.models.Country]", r, _.validate[Seq[io.flow.reference.v0.models.Country]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def getSettingsAndRegionsByOrganizationId(
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.RegionSetting]] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/settings/regions", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.RegionSetting]", r, _.validate[Seq[io.flow.organization.v0.models.RegionSetting]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def putSettingsAndRegionsByOrganizationIdAndRegion(
        organizationId: String,
        region: String,
        regionSettingForm: io.flow.organization.v0.models.RegionSettingForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.RegionSetting] = {
        val payload = play.api.libs.json.Json.toJson(regionSettingForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/settings/regions/${play.utils.UriEncoding.encodePathSegment(region, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.RegionSetting", r, _.validate[io.flow.organization.v0.models.RegionSetting])
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.RegionSetting", r, _.validate[io.flow.organization.v0.models.RegionSetting])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 403, 422")
        }
      }

      override def deleteSettingsAndRegionsByOrganizationIdAndRegion(
        organizationId: String,
        region: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/settings/regions/${play.utils.UriEncoding.encodePathSegment(region, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 403, 404")
        }
      }

      override def post(
        organizationForm: io.flow.organization.v0.models.OrganizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("POST", s"/organizations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.common.v0.models.Organization", r, _.validate[io.flow.common.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 403, 422")
        }
      }

      override def putByOrganizationId(
        organizationId: String,
        organizationPutForm: io.flow.organization.v0.models.OrganizationPutForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationPutForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.common.v0.models.Organization", r, _.validate[io.flow.common.v0.models.Organization])
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.common.v0.models.Organization", r, _.validate[io.flow.common.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 403, 422")
        }
      }

      override def deleteByOrganizationId(
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.organization.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 403, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    ): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq("Content-Type" -> "application/json; charset=UTF-8")
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def countryPickers: io.flow.organization.v0.CountryPickers
      def ecommercePlatforms: io.flow.organization.v0.EcommercePlatforms
      def invitations: io.flow.organization.v0.Invitations
      def memberships: io.flow.organization.v0.Memberships
      def organizationAuthorizations: io.flow.organization.v0.OrganizationAuthorizations
      def organizationDefaultConfigurations: io.flow.organization.v0.OrganizationDefaultConfigurations
      def organizations: io.flow.organization.v0.Organizations
    }

  }

  trait CountryPickers {
    def get(
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.CountryPicker]

    def put(
      organizationId: String,
      countryPickerForm: io.flow.organization.v0.models.CountryPickerForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.CountryPicker]
  }

  trait EcommercePlatforms {
    def get(
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.EcommercePlatform]

    def put(
      organizationId: String,
      ecommercePlatformForm: io.flow.organization.v0.models.EcommercePlatformForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.EcommercePlatform]
  }

  trait Invitations {
    /**
     * Search invitations. Always paginated.
     *
     * @param organization Find invitations for this organization
     * @param email Find invitations for this email
     * @param token Find invitation for this token
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[String] = None,
      email: _root_.scala.Option[String] = None,
      token: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "-created_at",
      expand: _root_.scala.Option[Seq[String]] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.Invitation]]

    /**
     * @param invitation Filter to versions for invitations with any one of these ids.
     */
    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      invitation: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "journal_timestamp",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.InvitationVersion]]

    /**
     * Returns information about a specific invitation.
     */
    def getById(
      id: String,
      expand: _root_.scala.Option[Seq[String]] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation]

    /**
     * Create a new invitation.
     */
    def post(
      invitationForm: io.flow.organization.v0.models.InvitationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation]

    /**
     * Lookup an invitation by its token.
     */
    def getTokensByToken(
      token: String,
      expand: _root_.scala.Option[Seq[String]] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation]

    /**
     * Accepts the invitation w/ the specified token and the authenticated user.
     * Creating a membership record for this user within this organization. Invitations
     * are one time use only - you will get a validation error if the invitation has
     * previously been accepted or if the user's email addresses do not match the email
     * on the invite.
     */
    def putTokensByToken(
      token: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Memberships {
    /**
     * Search memberships. Always paginated.
     *
     * @param user Find memberships for this user id
     * @param organization Find memberships for this organization id
     * @param role Find memberships with ANY of these roles.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      user: _root_.scala.Option[String] = None,
      organization: _root_.scala.Option[String] = None,
      role: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "-created_at",
      expand: _root_.scala.Option[Seq[String]] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.Membership]]

    /**
     * @param membership Filter membership changes with any one of these ids.
     * @param user Filter membership changes for this user id
     * @param organization Filter membership changes for this organization id
     */
    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      membership: _root_.scala.Option[Seq[String]] = None,
      user: _root_.scala.Option[String] = None,
      organization: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "journal_timestamp",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.MembershipVersion]]

    /**
     * Returns information about a specific membership.
     */
    def getById(
      id: String,
      expand: _root_.scala.Option[Seq[String]] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership]

    /**
     * Create a new membership.
     */
    def post(
      membershipForm: io.flow.organization.v0.models.MembershipForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership]

    /**
     * Change the role for a specific membership record. If the user already has the
     * specified role within the organization, does nothing.
     */
    def putById(
      id: String,
      membershipPutForm: io.flow.organization.v0.models.MembershipPutForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait OrganizationAuthorizations {
    /**
     * For the authorized user, if the specified organization exists, and the user is
     * an active member of this organization, returns the authorization data used
     * throughout APIs at Flow, including the user's role in that organization and the
     * organization environment. Otherwise, returns 401 - this indicates either the org
     * does not exist or the user does not have access to the org.
     */
    @deprecated("Use GET /:organization/permission/checks")
    def post(
      organizationAuthorizationForm: io.flow.organization.v0.models.OrganizationAuthorizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationAuthorization]

    /**
     * For the authorized user and specific organization, if the user is an active
     * member of this organization, returns the authorization data used throughout APIs
     * at Flow, including the user's role in that organization and the organization
     * environment.
     */
    @deprecated("Use GET /:organization/permission/checks")
    def getByOrganization(
      organization: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationAuthorization]
  }

  trait OrganizationDefaultConfigurations {
    def get(
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationDefaultConfigurations]

    /**
     * Update the default checkout configuration id for this organization
     */
    def putCheckout(
      organizationId: String,
      organizationDefaultConfigurationsForm: io.flow.organization.v0.models.OrganizationDefaultConfigurationsForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationDefaultConfigurations]
  }

  trait Organizations {
    /**
     * Search organizations. Always paginated.
     *
     * @param name Find organizations with this name. Case insensitive. Exact match.
     * @param environment Find organizations with this environment
     * @param parent Find organizations that belong to this specified parent organization id. Case
     *        insensitive. Exact match.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      name: _root_.scala.Option[String] = None,
      environment: _root_.scala.Option[io.flow.common.v0.models.Environment] = None,
      parent: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "name",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.Organization]]

    /**
     * Provides visibility into recent changes of each object, including deletion
     *
     * @param organization Filter to organizations with any one of these ids.
     */
    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "journal_timestamp",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.OrganizationVersion]]

    /**
     * Returns information about a specific organization.
     */
    def getByOrganizationId(
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization]

    /**
     * Returns currencies for a specific organization.
     */
    def getSettingsAndCurrenciesByOrganizationId(
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Currency]]

    /**
     * Returns the list of enabled countries based on the region settings for a
     * specific organization
     */
    def getSettingsAndRegionsAndCountriesAndAvailableByOrganizationId(
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Country]]

    /**
     * Returns the region settings associated to a specific organization.
     */
    def getSettingsAndRegionsByOrganizationId(
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.RegionSetting]]

    /**
     * Updates or creates a region setting for a specific organization
     */
    def putSettingsAndRegionsByOrganizationIdAndRegion(
      organizationId: String,
      region: String,
      regionSettingForm: io.flow.organization.v0.models.RegionSettingForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.RegionSetting]

    /**
     * Removes the setting for this region for a specific organization
     */
    def deleteSettingsAndRegionsByOrganizationIdAndRegion(
      organizationId: String,
      region: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Create a new organization.
     */
    def post(
      organizationForm: io.flow.organization.v0.models.OrganizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization]

    /**
     * Update or create an organization with the specified id.
     */
    def putByOrganizationId(
      organizationId: String,
      organizationPutForm: io.flow.organization.v0.models.OrganizationPutForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization]

    /**
     * Delete the organization with this id
     */
    def deleteByOrganizationId(
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.organization.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.reference.v0.models.json._

    final case class GenericErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(s"${response.status}: ${response.body}")) {
      lazy val genericError = _root_.io.flow.organization.v0.Client.parseJson("io.flow.error.v0.models.GenericError", response, _.validate[io.flow.error.v0.models.GenericError])
    }

    final case class InvitationErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(s"${response.status}: ${response.body}")) {
      lazy val invitationError = _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.InvitationError", response, _.validate[io.flow.organization.v0.models.InvitationError])
    }

    final case class PermissionErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(s"${response.status}: ${response.body}")) {
      lazy val permissionError = _root_.io.flow.organization.v0.Client.parseJson("io.flow.permission.v0.models.PermissionError", response, _.validate[io.flow.permission.v0.models.PermissionError])
    }

    final case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}