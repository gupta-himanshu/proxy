/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.10.75
 * apibuilder 0.15.33 app.apibuilder.io/flow/item/latest/play_2_x_json
 */
package io.flow.item.v0.models {

  /**
   * The Local Item represents all of the data for a given item that is localized to
   * a given experience.
   *
   * @param attributes Original set of attributes from the catalog item for enabled organziations.
   */

  final case class LocalItem(
    id: String,
    experience: io.flow.common.v0.models.ExperienceSummary,
    center: _root_.scala.Option[io.flow.fulfillment.v0.models.CenterSummary] = None,
    item: io.flow.common.v0.models.CatalogItemReference,
    pricing: io.flow.item.v0.models.LocalItemPricing,
    status: io.flow.catalog.v0.models.SubcatalogItemStatus,
    attributes: _root_.scala.Option[Map[String, String]] = None
  )

  /**
   * Localized item attribute pricing information
   *
   * @param pretaxPrice The localized price before any tax for this experience.
   * @param vat The localized VAT price for this experience.
   * @param duty The localized duty price for this experience.
   * @param price The localized item price for this experience. This represents the price a
   *        consumer will pay to purchase this item in this experience.
   */

  final case class LocalItemAttributePricing(
    pretaxPrice: io.flow.common.v0.models.PriceWithBase,
    vat: _root_.scala.Option[io.flow.catalog.v0.models.LocalizedItemVat] = None,
    duty: _root_.scala.Option[io.flow.catalog.v0.models.LocalizedItemDuty] = None,
    price: io.flow.catalog.v0.models.LocalizedItemPrice
  )

  /**
   * Localized item pricing information
   *
   * @param price The localized item.price for this experience. This represents the price a
   *        consumer will pay to purchase this item in this experience.
   * @param vat The localized VAT price for this experience.
   * @param duty The localized duty price for this experience.
   * @param attributes All attributes with intent price as keys of this map - with each of those
   *        attributes mapped to its value in the local currency. For example, given an
   *        attribute named 'msrp' with intent 'price', this map will contain a key named
   *        'msrp'
   * @param priceAttributes Similar to 'attributes' but with a type showing the breakdown of a price
   */

  final case class LocalItemPricing(
    price: io.flow.catalog.v0.models.LocalizedItemPrice,
    vat: _root_.scala.Option[io.flow.catalog.v0.models.LocalizedItemVat] = None,
    duty: _root_.scala.Option[io.flow.catalog.v0.models.LocalizedItemDuty] = None,
    attributes: Map[String, io.flow.common.v0.models.PriceWithBase],
    priceAttributes: _root_.scala.Option[Map[String, io.flow.item.v0.models.LocalItemAttributePricing]] = None
  )

}

package io.flow.item.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.catalog.v0.models.json._
    import io.flow.common.v0.models.json._
    import io.flow.currency.v0.models.json._
    import io.flow.fulfillment.v0.models.json._
    import io.flow.item.v0.models.json._

    private[v0] implicit val jsonReadsUUID: play.api.libs.json.Reads[_root_.java.util.UUID] = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID: play.api.libs.json.Writes[_root_.java.util.UUID] = (x: _root_.java.util.UUID) => play.api.libs.json.JsString(x.toString)

    private[v0] implicit val jsonReadsJodaDateTime: play.api.libs.json.Reads[_root_.org.joda.time.DateTime] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime: play.api.libs.json.Writes[_root_.org.joda.time.DateTime] = (x: _root_.org.joda.time.DateTime) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
    }

    private[v0] implicit val jsonReadsJodaLocalDate: play.api.libs.json.Reads[_root_.org.joda.time.LocalDate] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate: play.api.libs.json.Writes[_root_.org.joda.time.LocalDate] = (x: _root_.org.joda.time.LocalDate) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
    }

    implicit def jsonReadsItemLocalItem: play.api.libs.json.Reads[LocalItem] = {
      for {
        id <- (__ \ "id").read[String]
        experience <- (__ \ "experience").read[io.flow.common.v0.models.ExperienceSummary]
        center <- (__ \ "center").readNullable[io.flow.fulfillment.v0.models.CenterSummary]
        item <- (__ \ "item").read[io.flow.common.v0.models.CatalogItemReference]
        pricing <- (__ \ "pricing").read[io.flow.item.v0.models.LocalItemPricing]
        status <- (__ \ "status").read[io.flow.catalog.v0.models.SubcatalogItemStatus]
        attributes <- (__ \ "attributes").readNullable[Map[String, String]]
      } yield LocalItem(id, experience, center, item, pricing, status, attributes)
    }

    def jsObjectLocalItem(obj: io.flow.item.v0.models.LocalItem): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "experience" -> io.flow.common.v0.models.json.jsObjectExperienceSummary(obj.experience),
        "item" -> io.flow.common.v0.models.json.jsObjectCatalogItemReference(obj.item),
        "pricing" -> jsObjectLocalItemPricing(obj.pricing),
        "status" -> play.api.libs.json.JsString(obj.status.toString)
      ) ++ (obj.center match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("center" -> io.flow.fulfillment.v0.models.json.jsObjectCenterSummary(x))
      }) ++
      (obj.attributes match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("attributes" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesItemLocalItem: play.api.libs.json.Writes[LocalItem] = {
      (obj: io.flow.item.v0.models.LocalItem) => {
        jsObjectLocalItem(obj)
      }
    }

    implicit def jsonReadsItemLocalItemAttributePricing: play.api.libs.json.Reads[LocalItemAttributePricing] = {
      for {
        pretaxPrice <- (__ \ "pretax_price").read[io.flow.common.v0.models.PriceWithBase]
        vat <- (__ \ "vat").readNullable[io.flow.catalog.v0.models.LocalizedItemVat]
        duty <- (__ \ "duty").readNullable[io.flow.catalog.v0.models.LocalizedItemDuty]
        price <- (__ \ "price").read[io.flow.catalog.v0.models.LocalizedItemPrice]
      } yield LocalItemAttributePricing(pretaxPrice, vat, duty, price)
    }

    def jsObjectLocalItemAttributePricing(obj: io.flow.item.v0.models.LocalItemAttributePricing): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "pretax_price" -> io.flow.common.v0.models.json.jsObjectPriceWithBase(obj.pretaxPrice),
        "price" -> io.flow.catalog.v0.models.json.jsObjectLocalizedItemPrice(obj.price)
      ) ++ (obj.vat match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("vat" -> io.flow.catalog.v0.models.json.jsObjectLocalizedItemVat(x))
      }) ++
      (obj.duty match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("duty" -> io.flow.catalog.v0.models.json.jsObjectLocalizedItemDuty(x))
      })
    }

    implicit def jsonWritesItemLocalItemAttributePricing: play.api.libs.json.Writes[LocalItemAttributePricing] = {
      (obj: io.flow.item.v0.models.LocalItemAttributePricing) => {
        jsObjectLocalItemAttributePricing(obj)
      }
    }

    implicit def jsonReadsItemLocalItemPricing: play.api.libs.json.Reads[LocalItemPricing] = {
      for {
        price <- (__ \ "price").read[io.flow.catalog.v0.models.LocalizedItemPrice]
        vat <- (__ \ "vat").readNullable[io.flow.catalog.v0.models.LocalizedItemVat]
        duty <- (__ \ "duty").readNullable[io.flow.catalog.v0.models.LocalizedItemDuty]
        attributes <- (__ \ "attributes").read[Map[String, io.flow.common.v0.models.PriceWithBase]]
        priceAttributes <- (__ \ "price_attributes").readNullable[Map[String, io.flow.item.v0.models.LocalItemAttributePricing]]
      } yield LocalItemPricing(price, vat, duty, attributes, priceAttributes)
    }

    def jsObjectLocalItemPricing(obj: io.flow.item.v0.models.LocalItemPricing): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "price" -> io.flow.catalog.v0.models.json.jsObjectLocalizedItemPrice(obj.price),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.vat match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("vat" -> io.flow.catalog.v0.models.json.jsObjectLocalizedItemVat(x))
      }) ++
      (obj.duty match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("duty" -> io.flow.catalog.v0.models.json.jsObjectLocalizedItemDuty(x))
      }) ++
      (obj.priceAttributes match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("price_attributes" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesItemLocalItemPricing: play.api.libs.json.Writes[LocalItemPricing] = {
      (obj: io.flow.item.v0.models.LocalItemPricing) => {
        jsObjectLocalItemPricing(obj)
      }
    }
  }
}

package io.flow.item.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}
