/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.10.75
 * apibuilder 0.15.33 app.apibuilder.io/flow/session-context/latest/play_2_x_json
 */
package io.flow.session.context.v0.models {

  final case class Context(
    id: String,
    experiments: Seq[io.flow.session.context.v0.models.SessionContextExperiment]
  )

  final case class ContextForm(
    experiments: Seq[io.flow.session.context.v0.models.SessionContextExperiment]
  )

  final case class ContextReference(
    id: String
  )

  /**
   * Experiment variant. Control or variant
   */

  final case class ExperimentVariant(
    key: String
  )

  /**
   * Experiment for A/B testing
   */

  final case class SessionContextExperiment(
    key: String,
    variant: _root_.scala.Option[io.flow.session.context.v0.models.ExperimentVariant] = None
  )

}

package io.flow.session.context.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.session.context.v0.models.json._

    private[v0] implicit val jsonReadsUUID: play.api.libs.json.Reads[_root_.java.util.UUID] = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID: play.api.libs.json.Writes[_root_.java.util.UUID] = (x: _root_.java.util.UUID) => play.api.libs.json.JsString(x.toString)

    private[v0] implicit val jsonReadsJodaDateTime: play.api.libs.json.Reads[_root_.org.joda.time.DateTime] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime: play.api.libs.json.Writes[_root_.org.joda.time.DateTime] = (x: _root_.org.joda.time.DateTime) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
    }

    private[v0] implicit val jsonReadsJodaLocalDate: play.api.libs.json.Reads[_root_.org.joda.time.LocalDate] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate: play.api.libs.json.Writes[_root_.org.joda.time.LocalDate] = (x: _root_.org.joda.time.LocalDate) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
    }

    implicit def jsonReadsSessionContextContext: play.api.libs.json.Reads[Context] = {
      for {
        id <- (__ \ "id").read[String]
        experiments <- (__ \ "experiments").read[Seq[io.flow.session.context.v0.models.SessionContextExperiment]]
      } yield Context(id, experiments)
    }

    def jsObjectContext(obj: io.flow.session.context.v0.models.Context): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "experiments" -> play.api.libs.json.Json.toJson(obj.experiments)
      )
    }

    implicit def jsonWritesSessionContextContext: play.api.libs.json.Writes[Context] = {
      (obj: io.flow.session.context.v0.models.Context) => {
        jsObjectContext(obj)
      }
    }

    implicit def jsonReadsSessionContextContextForm: play.api.libs.json.Reads[ContextForm] = {
      (__ \ "experiments").read[Seq[io.flow.session.context.v0.models.SessionContextExperiment]].map { x => new ContextForm(experiments = x) }
    }

    def jsObjectContextForm(obj: io.flow.session.context.v0.models.ContextForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "experiments" -> play.api.libs.json.Json.toJson(obj.experiments)
      )
    }

    implicit def jsonWritesSessionContextContextForm: play.api.libs.json.Writes[ContextForm] = {
      (obj: io.flow.session.context.v0.models.ContextForm) => {
        jsObjectContextForm(obj)
      }
    }

    implicit def jsonReadsSessionContextContextReference: play.api.libs.json.Reads[ContextReference] = {
      (__ \ "id").read[String].map { x => new ContextReference(id = x) }
    }

    def jsObjectContextReference(obj: io.flow.session.context.v0.models.ContextReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesSessionContextContextReference: play.api.libs.json.Writes[ContextReference] = {
      (obj: io.flow.session.context.v0.models.ContextReference) => {
        jsObjectContextReference(obj)
      }
    }

    implicit def jsonReadsSessionContextExperimentVariant: play.api.libs.json.Reads[ExperimentVariant] = {
      (__ \ "key").read[String].map { x => new ExperimentVariant(key = x) }
    }

    def jsObjectExperimentVariant(obj: io.flow.session.context.v0.models.ExperimentVariant): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonWritesSessionContextExperimentVariant: play.api.libs.json.Writes[ExperimentVariant] = {
      (obj: io.flow.session.context.v0.models.ExperimentVariant) => {
        jsObjectExperimentVariant(obj)
      }
    }

    implicit def jsonReadsSessionContextSessionContextExperiment: play.api.libs.json.Reads[SessionContextExperiment] = {
      for {
        key <- (__ \ "key").read[String]
        variant <- (__ \ "variant").readNullable[io.flow.session.context.v0.models.ExperimentVariant]
      } yield SessionContextExperiment(key, variant)
    }

    def jsObjectSessionContextExperiment(obj: io.flow.session.context.v0.models.SessionContextExperiment): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key)
      ) ++ (obj.variant match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("variant" -> jsObjectExperimentVariant(x))
      })
    }

    implicit def jsonWritesSessionContextSessionContextExperiment: play.api.libs.json.Writes[SessionContextExperiment] = {
      (obj: io.flow.session.context.v0.models.SessionContextExperiment) => {
        jsObjectSessionContextExperiment(obj)
      }
    }
  }
}

package io.flow.session.context.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}
