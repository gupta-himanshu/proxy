/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.10.59
 * apibuilder 0.15.33 app.apibuilder.io/flow/order-price/latest/play_2_x_json
 */
package io.flow.order.price.v0.models {

  /**
   * Represents a top-level order price detail, e.g. 'Subtotal' or 'VAT'.
   *
   * @param key The key indicating what this price detail represents.
   * @param currency The ISO-4217 3 character currency code in which the amount is calculated.
   * @param amount The total cost of the price detail in the currency of the experience in which
   *        the order is placed.
   * @param label The formatted label for this price detail that should be displayed to the user.
   * @param base The amount of this price detail in the base currency of the organization.
   * @param components Contains the components of this price detail that are used to calculate the
   *        total.
   * @param name The display name for this order price detail.
   * @param rate Optional rate for this order price detail if the key relates to a VAT or Duty.
   * @param accuracy Used to flag prices that are estimated and why. Missing values will be
   *        considered calculated. An order may only be submitted if all price components
   *        are calculated.
   * @param rateLabel Optional rate label for this order price detail if the key relates to a VAT or
   *        Duty in the format XX.XXX%.
   */
  final case class OrderPriceDetail(
    key: io.flow.order.price.v0.models.OrderPriceDetailKey,
    currency: String,
    amount: BigDecimal,
    label: String,
    base: io.flow.common.v0.models.Price,
    components: Seq[io.flow.order.price.v0.models.OrderPriceDetailComponent],
    name: _root_.scala.Option[String] = None,
    rate: _root_.scala.Option[BigDecimal] = None,
    accuracy: io.flow.price.v0.models.PriceAccuracy = io.flow.price.v0.models.PriceAccuracy.Calculated,
    rateLabel: _root_.scala.Option[String] = None
  )

  /**
   * @param currency The ISO-4217 3 character currency code in which the amount is calculated.
   * @param amount The total cost of the price detail component in the currency of the experience
   *        in which the order is placed.
   * @param base The amount of this price detail component in the base currency of the
   *        organization.
   * @param name The display name for this order price detail component.
   */
  final case class OrderPriceDetailComponent(
    key: io.flow.order.price.v0.models.OrderPriceDetailComponentKey,
    currency: String,
    amount: BigDecimal,
    label: String,
    base: io.flow.common.v0.models.Price,
    name: _root_.scala.Option[String] = None
  )

  sealed trait OrderPriceDetailComponentKey extends _root_.scala.Product with _root_.scala.Serializable

  object OrderPriceDetailComponentKey {

    /**
     * A general purpose adjustment applied to the order.
     */
    case object Adjustment extends OrderPriceDetailComponentKey { override def toString = "adjustment" }
    /**
     * An adjustment based on whether the VAT de minimis applies to the order.
     */
    case object VatDeminimis extends OrderPriceDetailComponentKey { override def toString = "vat_deminimis" }
    /**
     * An adjustment based on whether the duty de minimis applies to the order.
     */
    case object DutyDeminimis extends OrderPriceDetailComponentKey { override def toString = "duty_deminimis" }
    /**
     * The duty owed on the price of the order's items, including any added margins and
     * rounding.
     */
    case object DutiesItemPrice extends OrderPriceDetailComponentKey { override def toString = "duties_item_price" }
    /**
     * The duty owed on the freight cost of the order.
     */
    case object DutiesFreight extends OrderPriceDetailComponentKey { override def toString = "duties_freight" }
    /**
     * The duty owed on the insurance cost of the order.
     */
    case object DutiesInsurance extends OrderPriceDetailComponentKey { override def toString = "duties_insurance" }
    /**
     * The VAT owed on the price of the order's items, including any added margins and
     * rounding.
     */
    case object VatItemPrice extends OrderPriceDetailComponentKey { override def toString = "vat_item_price" }
    /**
     * The VAT owed on the freight cost of the order.
     */
    case object VatFreight extends OrderPriceDetailComponentKey { override def toString = "vat_freight" }
    /**
     * The VAT owed on the insurance cost of the order.
     */
    case object VatInsurance extends OrderPriceDetailComponentKey { override def toString = "vat_insurance" }
    /**
     * The VAT owed on the duties on the price of the order's items, including any
     * added margins and rounding.
     */
    case object VatDutiesItemPrice extends OrderPriceDetailComponentKey { override def toString = "vat_duties_item_price" }
    /**
     * The VAT owed on the duties on the freight cost of the order.
     */
    case object VatDutiesFreight extends OrderPriceDetailComponentKey { override def toString = "vat_duties_freight" }
    /**
     * The VAT owed on the duties on the insurance cost of the order.
     */
    case object VatDutiesInsurance extends OrderPriceDetailComponentKey { override def toString = "vat_duties_insurance" }
    /**
     * The sum of the price of the order's items with their currency margins, percent
     * margins, and fixed margins included.
     */
    case object ItemPrice extends OrderPriceDetailComponentKey { override def toString = "item_price" }
    /**
     * The sum of all discounts applied to the order's items.
     */
    case object ItemDiscount extends OrderPriceDetailComponentKey { override def toString = "item_discount" }
    /**
     * The sum of any rounding applied to the order's items.
     */
    case object Rounding extends OrderPriceDetailComponentKey { override def toString = "rounding" }
    /**
     * The insurance cost for the order.
     */
    case object Insurance extends OrderPriceDetailComponentKey { override def toString = "insurance" }
    /**
     * The shipping cost for the order.
     */
    case object Shipping extends OrderPriceDetailComponentKey { override def toString = "shipping" }
    /**
     * A shipping discount applied to the entire order.
     */
    case object ShippingDiscount extends OrderPriceDetailComponentKey { override def toString = "shipping_discount" }
    /**
     * A discount applied to the entire order.
     */
    case object OrderDiscount extends OrderPriceDetailComponentKey { override def toString = "order_discount" }
    /**
     * The sum of adjustments to item price, margin and rounding made due to percentage
     * sales margins.
     */
    case object SubtotalPercentSalesMargin extends OrderPriceDetailComponentKey { override def toString = "subtotal_percent_sales_margin" }
    /**
     * The sum of adjustments to VAT owed made due to percentage sales margins.
     */
    case object SubtotalVatPercentSalesMargin extends OrderPriceDetailComponentKey { override def toString = "subtotal_vat_percent_sales_margin" }
    /**
     * The sum of adjustments to duty owed made due to percentage sales margins.
     */
    case object SubtotalDutyPercentSalesMargin extends OrderPriceDetailComponentKey { override def toString = "subtotal_duty_percent_sales_margin" }
    /**
     * An offset to account for any VAT subsidized by the organization. For example, if
     * VAT is included in an item price and changes at the order level (due to passing
     * de minimis threshold, or the destination having a more specific VAT rate), the
     * difference will be represented here.
     */
    case object VatSubsidy extends OrderPriceDetailComponentKey { override def toString = "vat_subsidy" }
    /**
     * An offset to account for any duty subsidized by the organization. For example,
     * if duty is included in an item price and changes at the order level (due to
     * passing de minimis threshold, or the destination having a more specific duty
     * rate), the difference will be represented here.
     */
    case object DutySubsidy extends OrderPriceDetailComponentKey { override def toString = "duty_subsidy" }
    /**
     * Surcharge applied to a shipment for delivery to a remote area determined by the
     * carrier.
     */
    case object RemoteAreaSurcharge extends OrderPriceDetailComponentKey { override def toString = "remote_area_surcharge" }
    /**
     * Surcharge applied to a shipment for fuel consumption by the carrier.
     */
    case object FuelSurcharge extends OrderPriceDetailComponentKey { override def toString = "fuel_surcharge" }
    /**
     * Surcharge applied to a shipment during emergency circumstances, such as covid19.
     */
    case object EmergencySituationSurcharge extends OrderPriceDetailComponentKey { override def toString = "emergency_situation_surcharge" }
    /**
     * Surcharge applied per package during peak times.
     */
    case object PeakSurcharge extends OrderPriceDetailComponentKey { override def toString = "peak_surcharge" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends OrderPriceDetailComponentKey

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[OrderPriceDetailComponentKey] = scala.List(Adjustment, VatDeminimis, DutyDeminimis, DutiesItemPrice, DutiesFreight, DutiesInsurance, VatItemPrice, VatFreight, VatInsurance, VatDutiesItemPrice, VatDutiesFreight, VatDutiesInsurance, ItemPrice, ItemDiscount, Rounding, Insurance, Shipping, ShippingDiscount, OrderDiscount, SubtotalPercentSalesMargin, SubtotalVatPercentSalesMargin, SubtotalDutyPercentSalesMargin, VatSubsidy, DutySubsidy, RemoteAreaSurcharge, FuelSurcharge, EmergencySituationSurcharge, PeakSurcharge)

    private[this]
    val byName: Map[String, OrderPriceDetailComponentKey] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): OrderPriceDetailComponentKey = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[OrderPriceDetailComponentKey] = byName.get(value.toLowerCase)

  }

  sealed trait OrderPriceDetailKey extends _root_.scala.Product with _root_.scala.Serializable

  object OrderPriceDetailKey {

    /**
     * The details of any adjustments made to the order.
     */
    case object Adjustment extends OrderPriceDetailKey { override def toString = "adjustment" }
    /**
     * The details of the subtotal for the order, including item prices, margins, and
     * rounding.
     */
    case object Subtotal extends OrderPriceDetailKey { override def toString = "subtotal" }
    /**
     * The details of any VAT owed on the order.
     */
    case object Vat extends OrderPriceDetailKey { override def toString = "vat" }
    /**
     * The details of any duties owed on the order.
     */
    case object Duty extends OrderPriceDetailKey { override def toString = "duty" }
    /**
     * The details of shipping costs for the order.
     */
    case object Shipping extends OrderPriceDetailKey { override def toString = "shipping" }
    /**
     * The details of insurance costs for the order.
     */
    case object Insurance extends OrderPriceDetailKey { override def toString = "insurance" }
    /**
     * The details of any discount applied to the order.
     */
    case object Discount extends OrderPriceDetailKey { override def toString = "discount" }
    /**
     * Additional fees and levies applied to the order
     */
    case object Surcharges extends OrderPriceDetailKey { override def toString = "surcharges" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends OrderPriceDetailKey

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[OrderPriceDetailKey] = scala.List(Adjustment, Subtotal, Vat, Duty, Shipping, Insurance, Discount, Surcharges)

    private[this]
    val byName: Map[String, OrderPriceDetailKey] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): OrderPriceDetailKey = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[OrderPriceDetailKey] = byName.get(value.toLowerCase)

  }

}

package io.flow.order.price.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.order.price.v0.models.json._
    import io.flow.price.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID = new Writes[_root_.java.util.UUID] {
      def writes(x: _root_.java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[_root_.org.joda.time.DateTime] {
      def writes(x: _root_.org.joda.time.DateTime) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[_root_.org.joda.time.LocalDate] {
      def writes(x: _root_.org.joda.time.LocalDate) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
      }
    }

    implicit val jsonReadsOrderPriceOrderPriceDetailComponentKey = new play.api.libs.json.Reads[io.flow.order.price.v0.models.OrderPriceDetailComponentKey] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.order.price.v0.models.OrderPriceDetailComponentKey] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.order.price.v0.models.OrderPriceDetailComponentKey(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.order.price.v0.models.OrderPriceDetailComponentKey(v))
              case err: play.api.libs.json.JsError =>
                (js \ "order_price_detail_component_key").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.order.price.v0.models.OrderPriceDetailComponentKey(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesOrderPriceOrderPriceDetailComponentKey(obj: io.flow.order.price.v0.models.OrderPriceDetailComponentKey) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectOrderPriceDetailComponentKey(obj: io.flow.order.price.v0.models.OrderPriceDetailComponentKey) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOrderPriceOrderPriceDetailComponentKey: play.api.libs.json.Writes[OrderPriceDetailComponentKey] = {
      new play.api.libs.json.Writes[io.flow.order.price.v0.models.OrderPriceDetailComponentKey] {
        def writes(obj: io.flow.order.price.v0.models.OrderPriceDetailComponentKey) = {
          jsonWritesOrderPriceOrderPriceDetailComponentKey(obj)
        }
      }
    }

    implicit val jsonReadsOrderPriceOrderPriceDetailKey = new play.api.libs.json.Reads[io.flow.order.price.v0.models.OrderPriceDetailKey] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.order.price.v0.models.OrderPriceDetailKey] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.order.price.v0.models.OrderPriceDetailKey(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.order.price.v0.models.OrderPriceDetailKey(v))
              case err: play.api.libs.json.JsError =>
                (js \ "order_price_detail_key").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.order.price.v0.models.OrderPriceDetailKey(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesOrderPriceOrderPriceDetailKey(obj: io.flow.order.price.v0.models.OrderPriceDetailKey) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectOrderPriceDetailKey(obj: io.flow.order.price.v0.models.OrderPriceDetailKey) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOrderPriceOrderPriceDetailKey: play.api.libs.json.Writes[OrderPriceDetailKey] = {
      new play.api.libs.json.Writes[io.flow.order.price.v0.models.OrderPriceDetailKey] {
        def writes(obj: io.flow.order.price.v0.models.OrderPriceDetailKey) = {
          jsonWritesOrderPriceOrderPriceDetailKey(obj)
        }
      }
    }

    implicit def jsonReadsOrderPriceOrderPriceDetail: play.api.libs.json.Reads[OrderPriceDetail] = {
      for {
        key <- (__ \ "key").read[io.flow.order.price.v0.models.OrderPriceDetailKey]
        currency <- (__ \ "currency").read[String]
        amount <- (__ \ "amount").read[BigDecimal]
        label <- (__ \ "label").read[String]
        base <- (__ \ "base").read[io.flow.common.v0.models.Price]
        components <- (__ \ "components").read[Seq[io.flow.order.price.v0.models.OrderPriceDetailComponent]]
        name <- (__ \ "name").readNullable[String]
        rate <- (__ \ "rate").readNullable[BigDecimal]
        accuracy <- (__ \ "accuracy").readWithDefault[io.flow.price.v0.models.PriceAccuracy](io.flow.price.v0.models.PriceAccuracy.Calculated)
        rateLabel <- (__ \ "rate_label").readNullable[String]
      } yield OrderPriceDetail(key, currency, amount, label, base, components, name, rate, accuracy, rateLabel)
    }

    def jsObjectOrderPriceDetail(obj: io.flow.order.price.v0.models.OrderPriceDetail): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key.toString),
        "currency" -> play.api.libs.json.JsString(obj.currency),
        "amount" -> play.api.libs.json.JsNumber(obj.amount),
        "label" -> play.api.libs.json.JsString(obj.label),
        "base" -> io.flow.common.v0.models.json.jsObjectPrice(obj.base),
        "components" -> play.api.libs.json.Json.toJson(obj.components),
        "accuracy" -> play.api.libs.json.JsString(obj.accuracy.toString)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.rate match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("rate" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.rateLabel match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("rate_label" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesOrderPriceOrderPriceDetail: play.api.libs.json.Writes[OrderPriceDetail] = {
      new play.api.libs.json.Writes[io.flow.order.price.v0.models.OrderPriceDetail] {
        def writes(obj: io.flow.order.price.v0.models.OrderPriceDetail) = {
          jsObjectOrderPriceDetail(obj)
        }
      }
    }

    implicit def jsonReadsOrderPriceOrderPriceDetailComponent: play.api.libs.json.Reads[OrderPriceDetailComponent] = {
      for {
        key <- (__ \ "key").read[io.flow.order.price.v0.models.OrderPriceDetailComponentKey]
        currency <- (__ \ "currency").read[String]
        amount <- (__ \ "amount").read[BigDecimal]
        label <- (__ \ "label").read[String]
        base <- (__ \ "base").read[io.flow.common.v0.models.Price]
        name <- (__ \ "name").readNullable[String]
      } yield OrderPriceDetailComponent(key, currency, amount, label, base, name)
    }

    def jsObjectOrderPriceDetailComponent(obj: io.flow.order.price.v0.models.OrderPriceDetailComponent): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key.toString),
        "currency" -> play.api.libs.json.JsString(obj.currency),
        "amount" -> play.api.libs.json.JsNumber(obj.amount),
        "label" -> play.api.libs.json.JsString(obj.label),
        "base" -> io.flow.common.v0.models.json.jsObjectPrice(obj.base)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesOrderPriceOrderPriceDetailComponent: play.api.libs.json.Writes[OrderPriceDetailComponent] = {
      new play.api.libs.json.Writes[io.flow.order.price.v0.models.OrderPriceDetailComponent] {
        def writes(obj: io.flow.order.price.v0.models.OrderPriceDetailComponent) = {
          jsObjectOrderPriceDetailComponent(obj)
        }
      }
    }
  }
}

package io.flow.order.price.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.flow.order.price.v0.models._

      val orderPriceDetailComponentKeyConverter: ApibuilderTypeConverter[io.flow.order.price.v0.models.OrderPriceDetailComponentKey] = new ApibuilderTypeConverter[io.flow.order.price.v0.models.OrderPriceDetailComponentKey] {
        override def convert(value: String): io.flow.order.price.v0.models.OrderPriceDetailComponentKey = io.flow.order.price.v0.models.OrderPriceDetailComponentKey(value)
        override def convert(value: io.flow.order.price.v0.models.OrderPriceDetailComponentKey): String = value.toString
        override def example: io.flow.order.price.v0.models.OrderPriceDetailComponentKey = io.flow.order.price.v0.models.OrderPriceDetailComponentKey.Adjustment
        override def validValues: Seq[io.flow.order.price.v0.models.OrderPriceDetailComponentKey] = io.flow.order.price.v0.models.OrderPriceDetailComponentKey.all
      }
      implicit def pathBindableOrderPriceDetailComponentKey(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.order.price.v0.models.OrderPriceDetailComponentKey] = ApibuilderPathBindable(orderPriceDetailComponentKeyConverter)
      implicit def queryStringBindableOrderPriceDetailComponentKey(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.order.price.v0.models.OrderPriceDetailComponentKey] = ApibuilderQueryStringBindable(orderPriceDetailComponentKeyConverter)

      val orderPriceDetailKeyConverter: ApibuilderTypeConverter[io.flow.order.price.v0.models.OrderPriceDetailKey] = new ApibuilderTypeConverter[io.flow.order.price.v0.models.OrderPriceDetailKey] {
        override def convert(value: String): io.flow.order.price.v0.models.OrderPriceDetailKey = io.flow.order.price.v0.models.OrderPriceDetailKey(value)
        override def convert(value: io.flow.order.price.v0.models.OrderPriceDetailKey): String = value.toString
        override def example: io.flow.order.price.v0.models.OrderPriceDetailKey = io.flow.order.price.v0.models.OrderPriceDetailKey.Adjustment
        override def validValues: Seq[io.flow.order.price.v0.models.OrderPriceDetailKey] = io.flow.order.price.v0.models.OrderPriceDetailKey.all
      }
      implicit def pathBindableOrderPriceDetailKey(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.order.price.v0.models.OrderPriceDetailKey] = ApibuilderPathBindable(orderPriceDetailKeyConverter)
      implicit def queryStringBindableOrderPriceDetailKey(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.order.price.v0.models.OrderPriceDetailKey] = ApibuilderQueryStringBindable(orderPriceDetailKeyConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}
