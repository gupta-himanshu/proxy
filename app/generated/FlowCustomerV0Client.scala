/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.10.59
 * apibuilder 0.15.33 app.apibuilder.io/flow/customer/latest/play_2_8_client
 */
package io.flow.customer.v0.models {

  /**
   * A customer represents the actual person placing an order.
   *
   * @param number Customer identification number as represented in the client's system
   * @param email Customer email address
   * @param phone Customer phone number
   */
  final case class Customer(
    id: String,
    number: String,
    email: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[io.flow.common.v0.models.Name] = None,
    phone: _root_.scala.Option[String] = None
  )

  /**
   * A composed model representing a customer's address book contacts.
   */
  final case class CustomerAddressBook(
    contacts: Seq[io.flow.customer.v0.models.CustomerAddressBookContact]
  )

  /**
   * Preferences may indicate a contact is preferred for billing, invoicing, and/or
   * shipping.
   */
  final case class CustomerAddressBookContact(
    id: String,
    address: io.flow.common.v0.models.Address,
    contact: io.flow.common.v0.models.Contact,
    addressPreferences: Seq[io.flow.customer.v0.models.CustomerAddressPreference]
  )

  final case class CustomerAddressBookContactForm(
    address: io.flow.common.v0.models.Address,
    contact: _root_.scala.Option[io.flow.common.v0.models.Contact] = None,
    addressPreferences: _root_.scala.Option[Seq[io.flow.customer.v0.models.CustomerAddressPreference]] = None
  )

  /**
   * Represents address book contacts to append in bulk.
   */
  final case class CustomerAddressBookForm(
    contacts: Seq[io.flow.customer.v0.models.CustomerAddressBookContactForm]
  )

  /**
   * Represents a customer address preference. Only a single address book contact can
   * be associated per type. If contact is created or updated with a preference,
   * existing preferences of the same type will be removed.
   */
  final case class CustomerAddressPreference(
    `type`: io.flow.customer.v0.models.CustomerAddressType
  )

  /**
   * A bundle of all the content needed to render customer data.
   */
  final case class CustomerBundle(
    customer: io.flow.customer.v0.models.Customer,
    lastUsed: _root_.scala.Option[io.flow.customer.v0.models.CustomerLastUsed] = None
  )

  final case class CustomerClientToken(
    token: String
  )

  /**
   * @param number Customer identification number as represented in the client's system
   * @param email Customer email address
   * @param phone Customer phone number
   */
  final case class CustomerForm(
    number: String,
    email: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[io.flow.common.v0.models.Name] = None,
    phone: _root_.scala.Option[String] = None
  )

  /**
   * Last used details pertaining to a customer.
   */
  final case class CustomerLastUsed(
    order: io.flow.customer.v0.models.CustomerOrder,
    payment: io.flow.customer.v0.models.CustomerPayment
  )

  /**
   * Order details pertaining to a customer.
   */
  final case class CustomerOrder(
    number: String,
    destination: io.flow.experience.v0.models.OrderAddress,
    payments: _root_.scala.Option[Seq[io.flow.experience.v0.models.OrderPayment]] = None,
    submittedAt: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
  )

  /**
   * Customer payment details.
   *
   * @param paymentMethods Last used payment methods pertaining to a customer.
   */
  final case class CustomerPayment(
    paymentMethods: Seq[io.flow.reference.v0.models.PaymentMethod]
  )

  /**
   * Represent settings for when to purge customer data
   *
   * @param daysUntilPurgeUnused The number of days until unused customer data is purged
   * @param daysUntilPurgeUsed The number of days until customer data is purged since it was last used
   */
  final case class CustomerPurgeSettings(
    id: String,
    daysUntilPurgeUnused: Long,
    daysUntilPurgeUsed: Long
  )

  /**
   * Represent settings for when to purge customer data
   *
   * @param daysUntilPurgeUnused The number of days until unused customer data is purged
   * @param daysUntilPurgeUsed The number of days until customer data is purged since it was last used
   */
  final case class CustomerPurgeSettingsForm(
    daysUntilPurgeUnused: Long,
    daysUntilPurgeUsed: Long
  )

  /**
   * @param email Customer email address
   * @param phone Customer phone number
   */
  final case class CustomerPutForm(
    email: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[io.flow.common.v0.models.Name] = None,
    phone: _root_.scala.Option[String] = None
  )

  /**
   * Represents a mapping between a customer number and a token
   *
   * @param customer Customer number as represented in the client's system
   * @param token A crytographically secure string to identify a Flow customer
   */
  final case class CustomerToken(
    id: String,
    customer: io.flow.common.v0.models.CustomerReference,
    token: String
  )

  sealed trait CustomerAddressType extends _root_.scala.Product with _root_.scala.Serializable

  object CustomerAddressType {

    case object Billing extends CustomerAddressType { override def toString = "billing" }
    case object Invoice extends CustomerAddressType { override def toString = "invoice" }
    case object Shipping extends CustomerAddressType { override def toString = "shipping" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends CustomerAddressType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[CustomerAddressType] = scala.List(Billing, Invoice, Shipping)

    private[this]
    val byName: Map[String, CustomerAddressType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): CustomerAddressType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[CustomerAddressType] = byName.get(value.toLowerCase)

  }

}

package io.flow.customer.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.customer.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.experience.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.reference.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID = new Writes[_root_.java.util.UUID] {
      def writes(x: _root_.java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[_root_.org.joda.time.DateTime] {
      def writes(x: _root_.org.joda.time.DateTime) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[_root_.org.joda.time.LocalDate] {
      def writes(x: _root_.org.joda.time.LocalDate) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
      }
    }

    implicit val jsonReadsCustomerCustomerAddressType = new play.api.libs.json.Reads[io.flow.customer.v0.models.CustomerAddressType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.customer.v0.models.CustomerAddressType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.customer.v0.models.CustomerAddressType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.customer.v0.models.CustomerAddressType(v))
              case err: play.api.libs.json.JsError =>
                (js \ "customer_address_type").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.customer.v0.models.CustomerAddressType(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesCustomerCustomerAddressType(obj: io.flow.customer.v0.models.CustomerAddressType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectCustomerAddressType(obj: io.flow.customer.v0.models.CustomerAddressType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCustomerCustomerAddressType: play.api.libs.json.Writes[CustomerAddressType] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerAddressType] {
        def writes(obj: io.flow.customer.v0.models.CustomerAddressType) = {
          jsonWritesCustomerCustomerAddressType(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomer: play.api.libs.json.Reads[Customer] = {
      for {
        id <- (__ \ "id").read[String]
        number <- (__ \ "number").read[String]
        email <- (__ \ "email").readNullable[String]
        name <- (__ \ "name").readNullable[io.flow.common.v0.models.Name]
        phone <- (__ \ "phone").readNullable[String]
      } yield Customer(id, number, email, name, phone)
    }

    def jsObjectCustomer(obj: io.flow.customer.v0.models.Customer): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "number" -> play.api.libs.json.JsString(obj.number)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> io.flow.common.v0.models.json.jsObjectName(x))
      }) ++
      (obj.phone match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("phone" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCustomerCustomer: play.api.libs.json.Writes[Customer] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.Customer] {
        def writes(obj: io.flow.customer.v0.models.Customer) = {
          jsObjectCustomer(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerAddressBook: play.api.libs.json.Reads[CustomerAddressBook] = {
      (__ \ "contacts").read[Seq[io.flow.customer.v0.models.CustomerAddressBookContact]].map { x => new CustomerAddressBook(contacts = x) }
    }

    def jsObjectCustomerAddressBook(obj: io.flow.customer.v0.models.CustomerAddressBook): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "contacts" -> play.api.libs.json.Json.toJson(obj.contacts)
      )
    }

    implicit def jsonWritesCustomerCustomerAddressBook: play.api.libs.json.Writes[CustomerAddressBook] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerAddressBook] {
        def writes(obj: io.flow.customer.v0.models.CustomerAddressBook) = {
          jsObjectCustomerAddressBook(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerAddressBookContact: play.api.libs.json.Reads[CustomerAddressBookContact] = {
      for {
        id <- (__ \ "id").read[String]
        address <- (__ \ "address").read[io.flow.common.v0.models.Address]
        contact <- (__ \ "contact").read[io.flow.common.v0.models.Contact]
        addressPreferences <- (__ \ "address_preferences").read[Seq[io.flow.customer.v0.models.CustomerAddressPreference]]
      } yield CustomerAddressBookContact(id, address, contact, addressPreferences)
    }

    def jsObjectCustomerAddressBookContact(obj: io.flow.customer.v0.models.CustomerAddressBookContact): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "address" -> io.flow.common.v0.models.json.jsObjectAddress(obj.address),
        "contact" -> io.flow.common.v0.models.json.jsObjectContact(obj.contact),
        "address_preferences" -> play.api.libs.json.Json.toJson(obj.addressPreferences)
      )
    }

    implicit def jsonWritesCustomerCustomerAddressBookContact: play.api.libs.json.Writes[CustomerAddressBookContact] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerAddressBookContact] {
        def writes(obj: io.flow.customer.v0.models.CustomerAddressBookContact) = {
          jsObjectCustomerAddressBookContact(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerAddressBookContactForm: play.api.libs.json.Reads[CustomerAddressBookContactForm] = {
      for {
        address <- (__ \ "address").read[io.flow.common.v0.models.Address]
        contact <- (__ \ "contact").readNullable[io.flow.common.v0.models.Contact]
        addressPreferences <- (__ \ "address_preferences").readNullable[Seq[io.flow.customer.v0.models.CustomerAddressPreference]]
      } yield CustomerAddressBookContactForm(address, contact, addressPreferences)
    }

    def jsObjectCustomerAddressBookContactForm(obj: io.flow.customer.v0.models.CustomerAddressBookContactForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "address" -> io.flow.common.v0.models.json.jsObjectAddress(obj.address)
      ) ++ (obj.contact match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("contact" -> io.flow.common.v0.models.json.jsObjectContact(x))
      }) ++
      (obj.addressPreferences match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("address_preferences" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesCustomerCustomerAddressBookContactForm: play.api.libs.json.Writes[CustomerAddressBookContactForm] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerAddressBookContactForm] {
        def writes(obj: io.flow.customer.v0.models.CustomerAddressBookContactForm) = {
          jsObjectCustomerAddressBookContactForm(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerAddressBookForm: play.api.libs.json.Reads[CustomerAddressBookForm] = {
      (__ \ "contacts").read[Seq[io.flow.customer.v0.models.CustomerAddressBookContactForm]].map { x => new CustomerAddressBookForm(contacts = x) }
    }

    def jsObjectCustomerAddressBookForm(obj: io.flow.customer.v0.models.CustomerAddressBookForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "contacts" -> play.api.libs.json.Json.toJson(obj.contacts)
      )
    }

    implicit def jsonWritesCustomerCustomerAddressBookForm: play.api.libs.json.Writes[CustomerAddressBookForm] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerAddressBookForm] {
        def writes(obj: io.flow.customer.v0.models.CustomerAddressBookForm) = {
          jsObjectCustomerAddressBookForm(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerAddressPreference: play.api.libs.json.Reads[CustomerAddressPreference] = {
      (__ \ "type").read[io.flow.customer.v0.models.CustomerAddressType].map { x => new CustomerAddressPreference(`type` = x) }
    }

    def jsObjectCustomerAddressPreference(obj: io.flow.customer.v0.models.CustomerAddressPreference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString)
      )
    }

    implicit def jsonWritesCustomerCustomerAddressPreference: play.api.libs.json.Writes[CustomerAddressPreference] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerAddressPreference] {
        def writes(obj: io.flow.customer.v0.models.CustomerAddressPreference) = {
          jsObjectCustomerAddressPreference(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerBundle: play.api.libs.json.Reads[CustomerBundle] = {
      for {
        customer <- (__ \ "customer").read[io.flow.customer.v0.models.Customer]
        lastUsed <- (__ \ "last_used").readNullable[io.flow.customer.v0.models.CustomerLastUsed]
      } yield CustomerBundle(customer, lastUsed)
    }

    def jsObjectCustomerBundle(obj: io.flow.customer.v0.models.CustomerBundle): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "customer" -> jsObjectCustomer(obj.customer)
      ) ++ (obj.lastUsed match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last_used" -> jsObjectCustomerLastUsed(x))
      })
    }

    implicit def jsonWritesCustomerCustomerBundle: play.api.libs.json.Writes[CustomerBundle] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerBundle] {
        def writes(obj: io.flow.customer.v0.models.CustomerBundle) = {
          jsObjectCustomerBundle(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerClientToken: play.api.libs.json.Reads[CustomerClientToken] = {
      (__ \ "token").read[String].map { x => new CustomerClientToken(token = x) }
    }

    def jsObjectCustomerClientToken(obj: io.flow.customer.v0.models.CustomerClientToken): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token)
      )
    }

    implicit def jsonWritesCustomerCustomerClientToken: play.api.libs.json.Writes[CustomerClientToken] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerClientToken] {
        def writes(obj: io.flow.customer.v0.models.CustomerClientToken) = {
          jsObjectCustomerClientToken(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerForm: play.api.libs.json.Reads[CustomerForm] = {
      for {
        number <- (__ \ "number").read[String]
        email <- (__ \ "email").readNullable[String]
        name <- (__ \ "name").readNullable[io.flow.common.v0.models.Name]
        phone <- (__ \ "phone").readNullable[String]
      } yield CustomerForm(number, email, name, phone)
    }

    def jsObjectCustomerForm(obj: io.flow.customer.v0.models.CustomerForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "number" -> play.api.libs.json.JsString(obj.number)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> io.flow.common.v0.models.json.jsObjectName(x))
      }) ++
      (obj.phone match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("phone" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCustomerCustomerForm: play.api.libs.json.Writes[CustomerForm] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerForm] {
        def writes(obj: io.flow.customer.v0.models.CustomerForm) = {
          jsObjectCustomerForm(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerLastUsed: play.api.libs.json.Reads[CustomerLastUsed] = {
      for {
        order <- (__ \ "order").read[io.flow.customer.v0.models.CustomerOrder]
        payment <- (__ \ "payment").read[io.flow.customer.v0.models.CustomerPayment]
      } yield CustomerLastUsed(order, payment)
    }

    def jsObjectCustomerLastUsed(obj: io.flow.customer.v0.models.CustomerLastUsed): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "order" -> jsObjectCustomerOrder(obj.order),
        "payment" -> jsObjectCustomerPayment(obj.payment)
      )
    }

    implicit def jsonWritesCustomerCustomerLastUsed: play.api.libs.json.Writes[CustomerLastUsed] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerLastUsed] {
        def writes(obj: io.flow.customer.v0.models.CustomerLastUsed) = {
          jsObjectCustomerLastUsed(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerOrder: play.api.libs.json.Reads[CustomerOrder] = {
      for {
        number <- (__ \ "number").read[String]
        destination <- (__ \ "destination").read[io.flow.experience.v0.models.OrderAddress]
        payments <- (__ \ "payments").readNullable[Seq[io.flow.experience.v0.models.OrderPayment]]
        submittedAt <- (__ \ "submitted_at").readNullable[_root_.org.joda.time.DateTime]
      } yield CustomerOrder(number, destination, payments, submittedAt)
    }

    def jsObjectCustomerOrder(obj: io.flow.customer.v0.models.CustomerOrder): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "number" -> play.api.libs.json.JsString(obj.number),
        "destination" -> io.flow.experience.v0.models.json.jsObjectOrderAddress(obj.destination)
      ) ++ (obj.payments match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("payments" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.submittedAt match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("submitted_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      })
    }

    implicit def jsonWritesCustomerCustomerOrder: play.api.libs.json.Writes[CustomerOrder] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerOrder] {
        def writes(obj: io.flow.customer.v0.models.CustomerOrder) = {
          jsObjectCustomerOrder(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerPayment: play.api.libs.json.Reads[CustomerPayment] = {
      (__ \ "payment_methods").read[Seq[io.flow.reference.v0.models.PaymentMethod]].map { x => new CustomerPayment(paymentMethods = x) }
    }

    def jsObjectCustomerPayment(obj: io.flow.customer.v0.models.CustomerPayment): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "payment_methods" -> play.api.libs.json.Json.toJson(obj.paymentMethods)
      )
    }

    implicit def jsonWritesCustomerCustomerPayment: play.api.libs.json.Writes[CustomerPayment] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerPayment] {
        def writes(obj: io.flow.customer.v0.models.CustomerPayment) = {
          jsObjectCustomerPayment(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerPurgeSettings: play.api.libs.json.Reads[CustomerPurgeSettings] = {
      for {
        id <- (__ \ "id").read[String]
        daysUntilPurgeUnused <- (__ \ "days_until_purge_unused").read[Long]
        daysUntilPurgeUsed <- (__ \ "days_until_purge_used").read[Long]
      } yield CustomerPurgeSettings(id, daysUntilPurgeUnused, daysUntilPurgeUsed)
    }

    def jsObjectCustomerPurgeSettings(obj: io.flow.customer.v0.models.CustomerPurgeSettings): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "days_until_purge_unused" -> play.api.libs.json.JsNumber(obj.daysUntilPurgeUnused),
        "days_until_purge_used" -> play.api.libs.json.JsNumber(obj.daysUntilPurgeUsed)
      )
    }

    implicit def jsonWritesCustomerCustomerPurgeSettings: play.api.libs.json.Writes[CustomerPurgeSettings] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerPurgeSettings] {
        def writes(obj: io.flow.customer.v0.models.CustomerPurgeSettings) = {
          jsObjectCustomerPurgeSettings(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerPurgeSettingsForm: play.api.libs.json.Reads[CustomerPurgeSettingsForm] = {
      for {
        daysUntilPurgeUnused <- (__ \ "days_until_purge_unused").read[Long]
        daysUntilPurgeUsed <- (__ \ "days_until_purge_used").read[Long]
      } yield CustomerPurgeSettingsForm(daysUntilPurgeUnused, daysUntilPurgeUsed)
    }

    def jsObjectCustomerPurgeSettingsForm(obj: io.flow.customer.v0.models.CustomerPurgeSettingsForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "days_until_purge_unused" -> play.api.libs.json.JsNumber(obj.daysUntilPurgeUnused),
        "days_until_purge_used" -> play.api.libs.json.JsNumber(obj.daysUntilPurgeUsed)
      )
    }

    implicit def jsonWritesCustomerCustomerPurgeSettingsForm: play.api.libs.json.Writes[CustomerPurgeSettingsForm] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerPurgeSettingsForm] {
        def writes(obj: io.flow.customer.v0.models.CustomerPurgeSettingsForm) = {
          jsObjectCustomerPurgeSettingsForm(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerPutForm: play.api.libs.json.Reads[CustomerPutForm] = {
      for {
        email <- (__ \ "email").readNullable[String]
        name <- (__ \ "name").readNullable[io.flow.common.v0.models.Name]
        phone <- (__ \ "phone").readNullable[String]
      } yield CustomerPutForm(email, name, phone)
    }

    def jsObjectCustomerPutForm(obj: io.flow.customer.v0.models.CustomerPutForm): play.api.libs.json.JsObject = {
      (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> io.flow.common.v0.models.json.jsObjectName(x))
      }) ++
      (obj.phone match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("phone" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCustomerCustomerPutForm: play.api.libs.json.Writes[CustomerPutForm] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerPutForm] {
        def writes(obj: io.flow.customer.v0.models.CustomerPutForm) = {
          jsObjectCustomerPutForm(obj)
        }
      }
    }

    implicit def jsonReadsCustomerCustomerToken: play.api.libs.json.Reads[CustomerToken] = {
      for {
        id <- (__ \ "id").read[String]
        customer <- (__ \ "customer").read[io.flow.common.v0.models.CustomerReference]
        token <- (__ \ "token").read[String]
      } yield CustomerToken(id, customer, token)
    }

    def jsObjectCustomerToken(obj: io.flow.customer.v0.models.CustomerToken): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "customer" -> io.flow.common.v0.models.json.jsObjectCustomerReference(obj.customer),
        "token" -> play.api.libs.json.JsString(obj.token)
      )
    }

    implicit def jsonWritesCustomerCustomerToken: play.api.libs.json.Writes[CustomerToken] = {
      new play.api.libs.json.Writes[io.flow.customer.v0.models.CustomerToken] {
        def writes(obj: io.flow.customer.v0.models.CustomerToken) = {
          jsObjectCustomerToken(obj)
        }
      }
    }
  }
}

package io.flow.customer.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.flow.customer.v0.models._

      val customerAddressTypeConverter: ApibuilderTypeConverter[io.flow.customer.v0.models.CustomerAddressType] = new ApibuilderTypeConverter[io.flow.customer.v0.models.CustomerAddressType] {
        override def convert(value: String): io.flow.customer.v0.models.CustomerAddressType = io.flow.customer.v0.models.CustomerAddressType(value)
        override def convert(value: io.flow.customer.v0.models.CustomerAddressType): String = value.toString
        override def example: io.flow.customer.v0.models.CustomerAddressType = io.flow.customer.v0.models.CustomerAddressType.Billing
        override def validValues: Seq[io.flow.customer.v0.models.CustomerAddressType] = io.flow.customer.v0.models.CustomerAddressType.all
      }
      implicit def pathBindableCustomerAddressType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.customer.v0.models.CustomerAddressType] = ApibuilderPathBindable(customerAddressTypeConverter)
      implicit def queryStringBindableCustomerAddressType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.customer.v0.models.CustomerAddressType] = ApibuilderQueryStringBindable(customerAddressTypeConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.customer.v0 {

  object Constants {

    val Namespace = "io.flow.customer.v0"
    val UserAgent = "apibuilder 0.15.33 app.apibuilder.io/flow/customer/latest/play_2_8_client"
    val Version = "0.10.59"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.customer.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.customer.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.experience.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.reference.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.customer.v0.Client")

    logger.info(s"Initializing io.flow.customer.v0.Client for url $baseUrl")

    def customerAddressBook: CustomerAddressBook = CustomerAddressBook

    def customerAddressBookContacts: CustomerAddressBookContacts = CustomerAddressBookContacts

    def customerBundles: CustomerBundles = CustomerBundles

    def customerPurgeSettings: CustomerPurgeSettings = CustomerPurgeSettings

    def customers: Customers = Customers

    def customerTokens: CustomerTokens = CustomerTokens

    object CustomerAddressBook extends CustomerAddressBook {
      override def get(
        organization: String,
        number: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerAddressBook] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers/${play.utils.UriEncoding.encodePathSegment(number, "UTF-8")}/addresses/book", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerAddressBook", r, _.validate[io.flow.customer.v0.models.CustomerAddressBook])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }
    }

    object CustomerAddressBookContacts extends CustomerAddressBookContacts {
      override def get(
        organization: String,
        number: String,
        id: _root_.scala.Option[Seq[String]] = None,
        email: _root_.scala.Option[Seq[String]] = None,
        phone: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "-created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.customer.v0.models.CustomerAddressBookContact]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          email.getOrElse(Nil).map("email" -> _) ++
          phone.getOrElse(Nil).map("phone" -> _)

        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers/${play.utils.UriEncoding.encodePathSegment(number, "UTF-8")}/addresses/book/contacts", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("Seq[io.flow.customer.v0.models.CustomerAddressBookContact]", r, _.validate[Seq[io.flow.customer.v0.models.CustomerAddressBookContact]])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403")
        }
      }

      override def getById(
        organization: String,
        number: String,
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerAddressBookContact] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers/${play.utils.UriEncoding.encodePathSegment(number, "UTF-8")}/addresses/book/contacts/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerAddressBookContact", r, _.validate[io.flow.customer.v0.models.CustomerAddressBookContact])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def post(
        organization: String,
        number: String,
        customerAddressBookContactForm: io.flow.customer.v0.models.CustomerAddressBookContactForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerAddressBookContact] = {
        val payload = play.api.libs.json.Json.toJson(customerAddressBookContactForm)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers/${play.utils.UriEncoding.encodePathSegment(number, "UTF-8")}/addresses/book/contacts", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerAddressBookContact", r, _.validate[io.flow.customer.v0.models.CustomerAddressBookContact])
          case r if r.status == 201 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerAddressBookContact", r, _.validate[io.flow.customer.v0.models.CustomerAddressBookContact])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 422 => throw io.flow.customer.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 403, 422")
        }
      }

      override def putById(
        organization: String,
        number: String,
        id: String,
        customerAddressBookContactForm: io.flow.customer.v0.models.CustomerAddressBookContactForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerAddressBookContact] = {
        val payload = play.api.libs.json.Json.toJson(customerAddressBookContactForm)

        _executeRequest("PUT", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers/${play.utils.UriEncoding.encodePathSegment(number, "UTF-8")}/addresses/book/contacts/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerAddressBookContact", r, _.validate[io.flow.customer.v0.models.CustomerAddressBookContact])
          case r if r.status == 201 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerAddressBookContact", r, _.validate[io.flow.customer.v0.models.CustomerAddressBookContact])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 422 => throw io.flow.customer.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 403, 422")
        }
      }

      override def deleteById(
        organization: String,
        number: String,
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers/${play.utils.UriEncoding.encodePathSegment(number, "UTF-8")}/addresses/book/contacts/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 403, 404")
        }
      }
    }

    object CustomerBundles extends CustomerBundles {
      override def getBundleByNumber(
        organization: String,
        number: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerBundle] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers/${play.utils.UriEncoding.encodePathSegment(number, "UTF-8")}/bundle", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerBundle", r, _.validate[io.flow.customer.v0.models.CustomerBundle])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }
    }

    object CustomerPurgeSettings extends CustomerPurgeSettings {
      override def get(
        organization: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerPurgeSettings] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customer/purge/settings", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerPurgeSettings", r, _.validate[io.flow.customer.v0.models.CustomerPurgeSettings])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def put(
        organization: String,
        customerPurgeSettingsForm: io.flow.customer.v0.models.CustomerPurgeSettingsForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerPurgeSettings] = {
        val payload = play.api.libs.json.Json.toJson(customerPurgeSettingsForm)

        _executeRequest("PUT", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customer/purge/settings", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerPurgeSettings", r, _.validate[io.flow.customer.v0.models.CustomerPurgeSettings])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.customer.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404, 422")
        }
      }

      override def delete(
        organization: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customer/purge/settings", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Customers extends Customers {
      override def get(
        organization: String,
        id: _root_.scala.Option[Seq[String]] = None,
        number: _root_.scala.Option[Seq[String]] = None,
        email: _root_.scala.Option[Seq[String]] = None,
        phone: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "-created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.customer.v0.models.Customer]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          number.getOrElse(Nil).map("number" -> _) ++
          email.getOrElse(Nil).map("email" -> _) ++
          phone.getOrElse(Nil).map("phone" -> _)

        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("Seq[io.flow.customer.v0.models.Customer]", r, _.validate[Seq[io.flow.customer.v0.models.Customer]])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403")
        }
      }

      override def getByNumber(
        organization: String,
        number: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.Customer] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers/${play.utils.UriEncoding.encodePathSegment(number, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.Customer", r, _.validate[io.flow.customer.v0.models.Customer])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def postClientAndTokens(
        organization: String,
        customerClientToken: io.flow.customer.v0.models.CustomerClientToken,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.Customer] = {
        val payload = play.api.libs.json.Json.toJson(customerClientToken)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers/client/tokens", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.Customer", r, _.validate[io.flow.customer.v0.models.Customer])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.customer.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404, 422")
        }
      }

      override def post(
        organization: String,
        customerForm: io.flow.customer.v0.models.CustomerForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.Customer] = {
        val payload = play.api.libs.json.Json.toJson(customerForm)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.Customer", r, _.validate[io.flow.customer.v0.models.Customer])
          case r if r.status == 201 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.Customer", r, _.validate[io.flow.customer.v0.models.Customer])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.customer.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 403, 404, 422")
        }
      }

      override def putByNumber(
        organization: String,
        number: String,
        customerPutForm: io.flow.customer.v0.models.CustomerPutForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.Customer] = {
        val payload = play.api.libs.json.Json.toJson(customerPutForm)

        _executeRequest("PUT", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers/${play.utils.UriEncoding.encodePathSegment(number, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.Customer", r, _.validate[io.flow.customer.v0.models.Customer])
          case r if r.status == 201 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.Customer", r, _.validate[io.flow.customer.v0.models.Customer])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.customer.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 403, 404, 422")
        }
      }

      override def deleteByNumber(
        organization: String,
        number: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customers/${play.utils.UriEncoding.encodePathSegment(number, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 403, 404")
        }
      }
    }

    object CustomerTokens extends CustomerTokens {
      override def get(
        organization: String,
        id: _root_.scala.Option[Seq[String]] = None,
        token: _root_.scala.Option[String] = None,
        customerNumber: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "-created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.customer.v0.models.CustomerToken]] = {
        val queryParameters = Seq(
          token.map("token" -> _),
          customerNumber.map("customer_number" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customer/tokens", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("Seq[io.flow.customer.v0.models.CustomerToken]", r, _.validate[Seq[io.flow.customer.v0.models.CustomerToken]])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403")
        }
      }

      override def getByToken(
        organization: String,
        token: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerToken] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customer/tokens/${play.utils.UriEncoding.encodePathSegment(token, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerToken", r, _.validate[io.flow.customer.v0.models.CustomerToken])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }

      override def postLatestByCustomerNumber(
        organization: String,
        customerNumber: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerToken] = {
        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customer/tokens/latest/${play.utils.UriEncoding.encodePathSegment(customerNumber, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerToken", r, _.validate[io.flow.customer.v0.models.CustomerToken])
          case r if r.status == 201 => _root_.io.flow.customer.v0.Client.parseJson("io.flow.customer.v0.models.CustomerToken", r, _.validate[io.flow.customer.v0.models.CustomerToken])
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 403, 404")
        }
      }

      override def deleteById(
        organization: String,
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/customer/tokens/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.customer.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.customer.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 403, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    ): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.customer.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def customerAddressBook: io.flow.customer.v0.CustomerAddressBook
      def customerAddressBookContacts: io.flow.customer.v0.CustomerAddressBookContacts
      def customerBundles: io.flow.customer.v0.CustomerBundles
      def customerPurgeSettings: io.flow.customer.v0.CustomerPurgeSettings
      def customers: io.flow.customer.v0.Customers
      def customerTokens: io.flow.customer.v0.CustomerTokens
    }

  }

  trait CustomerAddressBook {
    /**
     * Retrieve customer addrress book.
     */
    def get(
      organization: String,
      number: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerAddressBook]
  }

  trait CustomerAddressBookContacts {
    /**
     * Search contacts. Always paginated.
     *
     * @param email Find contacts by email
     * @param phone Find contacts by phone
     */
    def get(
      organization: String,
      number: String,
      id: _root_.scala.Option[Seq[String]] = None,
      email: _root_.scala.Option[Seq[String]] = None,
      phone: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.customer.v0.models.CustomerAddressBookContact]]

    /**
     * Returns information about a specific contact.
     */
    def getById(
      organization: String,
      number: String,
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerAddressBookContact]

    /**
     * Create a contact.
     */
    def post(
      organization: String,
      number: String,
      customerAddressBookContactForm: io.flow.customer.v0.models.CustomerAddressBookContactForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerAddressBookContact]

    /**
     * Update or create a contact with the specified id.
     */
    def putById(
      organization: String,
      number: String,
      id: String,
      customerAddressBookContactForm: io.flow.customer.v0.models.CustomerAddressBookContactForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerAddressBookContact]

    /**
     * Delete the contact with this id.
     */
    def deleteById(
      organization: String,
      number: String,
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait CustomerBundles {
    /**
     * Returns information about a specific customer.
     */
    def getBundleByNumber(
      organization: String,
      number: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerBundle]
  }

  trait CustomerPurgeSettings {
    def get(
      organization: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerPurgeSettings]

    def put(
      organization: String,
      customerPurgeSettingsForm: io.flow.customer.v0.models.CustomerPurgeSettingsForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerPurgeSettings]

    def delete(
      organization: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Customers {
    /**
     * Search customers. Always paginated.
     *
     * @param number Find customers by number
     * @param email Find customers by email
     * @param phone Find customers by phone
     */
    def get(
      organization: String,
      id: _root_.scala.Option[Seq[String]] = None,
      number: _root_.scala.Option[Seq[String]] = None,
      email: _root_.scala.Option[Seq[String]] = None,
      phone: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.customer.v0.models.Customer]]

    /**
     * Returns information about a specific customer.
     */
    def getByNumber(
      organization: String,
      number: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.Customer]

    /**
     * Returns information about a specific customer given a client token.
     */
    def postClientAndTokens(
      organization: String,
      customerClientToken: io.flow.customer.v0.models.CustomerClientToken,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.Customer]

    /**
     * Create a customer.
     */
    def post(
      organization: String,
      customerForm: io.flow.customer.v0.models.CustomerForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.Customer]

    /**
     * Update or create a customer with the specified number.
     */
    def putByNumber(
      organization: String,
      number: String,
      customerPutForm: io.flow.customer.v0.models.CustomerPutForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.Customer]

    /**
     * Delete the customer with this number.
     */
    def deleteByNumber(
      organization: String,
      number: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait CustomerTokens {
    /**
     * Search tokens.
     */
    def get(
      organization: String,
      id: _root_.scala.Option[Seq[String]] = None,
      token: _root_.scala.Option[String] = None,
      customerNumber: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.customer.v0.models.CustomerToken]]

    /**
     * Returns a token if it exists.
     */
    def getByToken(
      organization: String,
      token: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerToken]

    /**
     * If there exists at least one token for this customer number, returns the latest.
     * Otherwise creates a new token and returns that
     */
    def postLatestByCustomerNumber(
      organization: String,
      customerNumber: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.customer.v0.models.CustomerToken]

    /**
     * Delete the token for this id.
     */
    def deleteById(
      organization: String,
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.customer.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.experience.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.reference.v0.models.json._

    final case class GenericErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(s"${response.status}: ${response.body}")) {
      lazy val genericError = _root_.io.flow.customer.v0.Client.parseJson("io.flow.error.v0.models.GenericError", response, _.validate[io.flow.error.v0.models.GenericError])
    }

    final case class PermissionErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(s"${response.status}: ${response.body}")) {
      lazy val permissionError = _root_.io.flow.customer.v0.Client.parseJson("io.flow.permission.v0.models.PermissionError", response, _.validate[io.flow.permission.v0.models.PermissionError])
    }

    final case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}