/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.10.97
 * apibuilder 0.15.33 app.apibuilder.io/flow/channel/latest/play_2_8_client
 */
package io.flow.channel.v0.models {

  /**
   * @param organizationIdPrefix If specified, this prefix will be used as part of the id for all organizations
   *        created via the channel. If not specified, the channel.id will be used as the
   *        organization id prefix
   */

  final case class Channel(
    id: String,
    name: String,
    environment: io.flow.common.v0.models.Environment,
    organizationIdPrefix: _root_.scala.Option[String] = None
  )

  final case class ChannelAuthorization(
    placeholder: _root_.scala.Option[String] = None
  )

  final case class ChannelAuthorizationForm(
    channelId: String
  )

  final case class ChannelCurrency(
    id: String,
    currency: String,
    channel: io.flow.common.v0.models.ChannelReference,
    capabilities: Seq[io.flow.channel.v0.models.ChannelCurrencyCapability]
  )

  /**
   * @param currency ISO 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   */

  final case class ChannelCurrencyForm(
    currency: String,
    capabilities: Seq[io.flow.channel.v0.models.ChannelCurrencyCapability]
  )

  final case class ChannelForm(
    name: String,
    environment: io.flow.common.v0.models.Environment,
    organizationIdPrefix: _root_.scala.Option[String] = None
  )

  /**
   * @param slug If specified, the slug is used as part of the id of the flow organization we
   *        create. If not specified, defaults to the id
   */

  final case class ChannelOrganization(
    id: String,
    organization: io.flow.common.v0.models.OrganizationReference,
    key: String,
    channel: io.flow.common.v0.models.ChannelReference,
    name: String,
    slug: _root_.scala.Option[String] = None,
    defaults: io.flow.common.v0.models.OrganizationDefaults,
    attributes: _root_.scala.Option[Map[String, String]] = None
  )

  final case class ChannelOrganizationForm(
    name: String,
    slug: _root_.scala.Option[String] = None,
    defaults: io.flow.common.v0.models.OrganizationDefaults,
    attributes: _root_.scala.Option[Map[String, String]] = None
  )
  sealed trait ChannelCurrencyCapability extends _root_.scala.Product with _root_.scala.Serializable

  object ChannelCurrencyCapability {

    case object PaymentAuthorizations extends ChannelCurrencyCapability { override def toString = "payment_authorizations" }
    case object SettlementCurrency extends ChannelCurrencyCapability { override def toString = "settlement_currency" }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends ChannelCurrencyCapability

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[ChannelCurrencyCapability] = scala.List(PaymentAuthorizations, SettlementCurrency)

    private[this]
    val byName: Map[String, ChannelCurrencyCapability] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ChannelCurrencyCapability = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ChannelCurrencyCapability] = byName.get(value.toLowerCase)

  }

}

package io.flow.channel.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.channel.v0.models.json._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.token.v0.models.json._

    private[v0] implicit val jsonReadsUUID: play.api.libs.json.Reads[_root_.java.util.UUID] = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID: play.api.libs.json.Writes[_root_.java.util.UUID] = (x: _root_.java.util.UUID) => play.api.libs.json.JsString(x.toString)

    private[v0] implicit val jsonReadsJodaDateTime: play.api.libs.json.Reads[_root_.org.joda.time.DateTime] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime: play.api.libs.json.Writes[_root_.org.joda.time.DateTime] = (x: _root_.org.joda.time.DateTime) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
    }

    private[v0] implicit val jsonReadsJodaLocalDate: play.api.libs.json.Reads[_root_.org.joda.time.LocalDate] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate: play.api.libs.json.Writes[_root_.org.joda.time.LocalDate] = (x: _root_.org.joda.time.LocalDate) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
    }

    implicit val jsonReadsChannelChannelCurrencyCapability: play.api.libs.json.Reads[io.flow.channel.v0.models.ChannelCurrencyCapability] = new play.api.libs.json.Reads[io.flow.channel.v0.models.ChannelCurrencyCapability] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.channel.v0.models.ChannelCurrencyCapability] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.channel.v0.models.ChannelCurrencyCapability(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.channel.v0.models.ChannelCurrencyCapability(v))
              case err: play.api.libs.json.JsError =>
                (js \ "channel_currency_capability").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.channel.v0.models.ChannelCurrencyCapability(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesChannelChannelCurrencyCapability(obj: io.flow.channel.v0.models.ChannelCurrencyCapability) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectChannelCurrencyCapability(obj: io.flow.channel.v0.models.ChannelCurrencyCapability) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesChannelChannelCurrencyCapability: play.api.libs.json.Writes[ChannelCurrencyCapability] = {
      (obj: io.flow.channel.v0.models.ChannelCurrencyCapability) => {
        jsonWritesChannelChannelCurrencyCapability(obj)
      }
    }

    implicit def jsonReadsChannelChannel: play.api.libs.json.Reads[Channel] = {
      for {
        id <- (__ \ "id").read[String]
        name <- (__ \ "name").read[String]
        environment <- (__ \ "environment").read[io.flow.common.v0.models.Environment]
        organizationIdPrefix <- (__ \ "organization_id_prefix").readNullable[String]
      } yield Channel(id, name, environment, organizationIdPrefix)
    }

    def jsObjectChannel(obj: io.flow.channel.v0.models.Channel): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      ) ++ (obj.organizationIdPrefix match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("organization_id_prefix" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesChannelChannel: play.api.libs.json.Writes[Channel] = {
      (obj: io.flow.channel.v0.models.Channel) => {
        jsObjectChannel(obj)
      }
    }

    implicit def jsonReadsChannelChannelAuthorization: play.api.libs.json.Reads[ChannelAuthorization] = {
      (__ \ "placeholder").readNullable[String].map { x => new ChannelAuthorization(placeholder = x) }
    }

    def jsObjectChannelAuthorization(obj: io.flow.channel.v0.models.ChannelAuthorization): play.api.libs.json.JsObject = {
      (obj.placeholder match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("placeholder" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesChannelChannelAuthorization: play.api.libs.json.Writes[ChannelAuthorization] = {
      (obj: io.flow.channel.v0.models.ChannelAuthorization) => {
        jsObjectChannelAuthorization(obj)
      }
    }

    implicit def jsonReadsChannelChannelAuthorizationForm: play.api.libs.json.Reads[ChannelAuthorizationForm] = {
      (__ \ "channel_id").read[String].map { x => new ChannelAuthorizationForm(channelId = x) }
    }

    def jsObjectChannelAuthorizationForm(obj: io.flow.channel.v0.models.ChannelAuthorizationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "channel_id" -> play.api.libs.json.JsString(obj.channelId)
      )
    }

    implicit def jsonWritesChannelChannelAuthorizationForm: play.api.libs.json.Writes[ChannelAuthorizationForm] = {
      (obj: io.flow.channel.v0.models.ChannelAuthorizationForm) => {
        jsObjectChannelAuthorizationForm(obj)
      }
    }

    implicit def jsonReadsChannelChannelCurrency: play.api.libs.json.Reads[ChannelCurrency] = {
      for {
        id <- (__ \ "id").read[String]
        currency <- (__ \ "currency").read[String]
        channel <- (__ \ "channel").read[io.flow.common.v0.models.ChannelReference]
        capabilities <- (__ \ "capabilities").read[Seq[io.flow.channel.v0.models.ChannelCurrencyCapability]]
      } yield ChannelCurrency(id, currency, channel, capabilities)
    }

    def jsObjectChannelCurrency(obj: io.flow.channel.v0.models.ChannelCurrency): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "currency" -> play.api.libs.json.JsString(obj.currency),
        "channel" -> io.flow.common.v0.models.json.jsObjectChannelReference(obj.channel),
        "capabilities" -> play.api.libs.json.Json.toJson(obj.capabilities)
      )
    }

    implicit def jsonWritesChannelChannelCurrency: play.api.libs.json.Writes[ChannelCurrency] = {
      (obj: io.flow.channel.v0.models.ChannelCurrency) => {
        jsObjectChannelCurrency(obj)
      }
    }

    implicit def jsonReadsChannelChannelCurrencyForm: play.api.libs.json.Reads[ChannelCurrencyForm] = {
      for {
        currency <- (__ \ "currency").read[String]
        capabilities <- (__ \ "capabilities").read[Seq[io.flow.channel.v0.models.ChannelCurrencyCapability]]
      } yield ChannelCurrencyForm(currency, capabilities)
    }

    def jsObjectChannelCurrencyForm(obj: io.flow.channel.v0.models.ChannelCurrencyForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "currency" -> play.api.libs.json.JsString(obj.currency),
        "capabilities" -> play.api.libs.json.Json.toJson(obj.capabilities)
      )
    }

    implicit def jsonWritesChannelChannelCurrencyForm: play.api.libs.json.Writes[ChannelCurrencyForm] = {
      (obj: io.flow.channel.v0.models.ChannelCurrencyForm) => {
        jsObjectChannelCurrencyForm(obj)
      }
    }

    implicit def jsonReadsChannelChannelForm: play.api.libs.json.Reads[ChannelForm] = {
      for {
        name <- (__ \ "name").read[String]
        environment <- (__ \ "environment").read[io.flow.common.v0.models.Environment]
        organizationIdPrefix <- (__ \ "organization_id_prefix").readNullable[String]
      } yield ChannelForm(name, environment, organizationIdPrefix)
    }

    def jsObjectChannelForm(obj: io.flow.channel.v0.models.ChannelForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      ) ++ (obj.organizationIdPrefix match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("organization_id_prefix" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesChannelChannelForm: play.api.libs.json.Writes[ChannelForm] = {
      (obj: io.flow.channel.v0.models.ChannelForm) => {
        jsObjectChannelForm(obj)
      }
    }

    implicit def jsonReadsChannelChannelOrganization: play.api.libs.json.Reads[ChannelOrganization] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.common.v0.models.OrganizationReference]
        key <- (__ \ "key").read[String]
        channel <- (__ \ "channel").read[io.flow.common.v0.models.ChannelReference]
        name <- (__ \ "name").read[String]
        slug <- (__ \ "slug").readNullable[String]
        defaults <- (__ \ "defaults").read[io.flow.common.v0.models.OrganizationDefaults]
        attributes <- (__ \ "attributes").readNullable[Map[String, String]]
      } yield ChannelOrganization(id, organization, key, channel, name, slug, defaults, attributes)
    }

    def jsObjectChannelOrganization(obj: io.flow.channel.v0.models.ChannelOrganization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> io.flow.common.v0.models.json.jsObjectOrganizationReference(obj.organization),
        "key" -> play.api.libs.json.JsString(obj.key),
        "channel" -> io.flow.common.v0.models.json.jsObjectChannelReference(obj.channel),
        "name" -> play.api.libs.json.JsString(obj.name),
        "defaults" -> io.flow.common.v0.models.json.jsObjectOrganizationDefaults(obj.defaults)
      ) ++ (obj.slug match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("slug" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.attributes match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("attributes" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesChannelChannelOrganization: play.api.libs.json.Writes[ChannelOrganization] = {
      (obj: io.flow.channel.v0.models.ChannelOrganization) => {
        jsObjectChannelOrganization(obj)
      }
    }

    implicit def jsonReadsChannelChannelOrganizationForm: play.api.libs.json.Reads[ChannelOrganizationForm] = {
      for {
        name <- (__ \ "name").read[String]
        slug <- (__ \ "slug").readNullable[String]
        defaults <- (__ \ "defaults").read[io.flow.common.v0.models.OrganizationDefaults]
        attributes <- (__ \ "attributes").readNullable[Map[String, String]]
      } yield ChannelOrganizationForm(name, slug, defaults, attributes)
    }

    def jsObjectChannelOrganizationForm(obj: io.flow.channel.v0.models.ChannelOrganizationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "defaults" -> io.flow.common.v0.models.json.jsObjectOrganizationDefaults(obj.defaults)
      ) ++ (obj.slug match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("slug" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.attributes match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("attributes" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesChannelChannelOrganizationForm: play.api.libs.json.Writes[ChannelOrganizationForm] = {
      (obj: io.flow.channel.v0.models.ChannelOrganizationForm) => {
        jsObjectChannelOrganizationForm(obj)
      }
    }
  }
}

package io.flow.channel.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.flow.channel.v0.models._

      val channelCurrencyCapabilityConverter: ApibuilderTypeConverter[io.flow.channel.v0.models.ChannelCurrencyCapability] = new ApibuilderTypeConverter[io.flow.channel.v0.models.ChannelCurrencyCapability] {
        override def convert(value: String): io.flow.channel.v0.models.ChannelCurrencyCapability = io.flow.channel.v0.models.ChannelCurrencyCapability(value)
        override def convert(value: io.flow.channel.v0.models.ChannelCurrencyCapability): String = value.toString
        override def example: io.flow.channel.v0.models.ChannelCurrencyCapability = io.flow.channel.v0.models.ChannelCurrencyCapability.PaymentAuthorizations
        override def validValues: Seq[io.flow.channel.v0.models.ChannelCurrencyCapability] = io.flow.channel.v0.models.ChannelCurrencyCapability.all
      }
      implicit def pathBindableChannelCurrencyCapability(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.channel.v0.models.ChannelCurrencyCapability] = ApibuilderPathBindable(channelCurrencyCapabilityConverter)
      implicit def queryStringBindableChannelCurrencyCapability(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.channel.v0.models.ChannelCurrencyCapability] = ApibuilderQueryStringBindable(channelCurrencyCapabilityConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.channel.v0 {

  object Constants {

    val Namespace = "io.flow.channel.v0"
    val UserAgent = "apibuilder 0.15.33 app.apibuilder.io/flow/channel/latest/play_2_8_client"
    val Version = "0.10.97"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.channel.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.channel.v0.models.json._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.token.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.channel.v0.Client")

    logger.info(s"Initializing io.flow.channel.v0.Client for url $baseUrl")

    def channelAuthorizations: ChannelAuthorizations = ChannelAuthorizations

    def channelOrganizations: ChannelOrganizations = ChannelOrganizations

    def channels: Channels = Channels

    object ChannelAuthorizations extends ChannelAuthorizations {
      override def post(
        channelAuthorizationForm: io.flow.channel.v0.models.ChannelAuthorizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.ChannelAuthorization] = {
        val payload = play.api.libs.json.Json.toJson(channelAuthorizationForm)

        _executeRequest("POST", s"/channel/authorizations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.channel.v0.Client.parseJson("io.flow.channel.v0.models.ChannelAuthorization", r, _.validate[io.flow.channel.v0.models.ChannelAuthorization])
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.channel.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 404, 422")
        }
      }
    }

    object ChannelOrganizations extends ChannelOrganizations {
      override def get(
        channelId: String,
        id: _root_.scala.Option[Seq[String]] = None,
        key: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "name",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.channel.v0.models.ChannelOrganization]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          key.getOrElse(Nil).map("key" -> _)

        _executeRequest("GET", s"/channel/${play.utils.UriEncoding.encodePathSegment(channelId, "UTF-8")}/organizations", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.channel.v0.Client.parseJson("Seq[io.flow.channel.v0.models.ChannelOrganization]", r, _.validate[Seq[io.flow.channel.v0.models.ChannelOrganization]])
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.channel.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404, 422")
        }
      }

      override def getByKey(
        channelId: String,
        key: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.ChannelOrganization] = {
        _executeRequest("GET", s"/channel/${play.utils.UriEncoding.encodePathSegment(channelId, "UTF-8")}/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.channel.v0.Client.parseJson("io.flow.channel.v0.models.ChannelOrganization", r, _.validate[io.flow.channel.v0.models.ChannelOrganization])
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def putByKey(
        channelId: String,
        key: String,
        channelOrganizationForm: io.flow.channel.v0.models.ChannelOrganizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.ChannelOrganization] = {
        val payload = play.api.libs.json.Json.toJson(channelOrganizationForm)

        _executeRequest("PUT", s"/channel/${play.utils.UriEncoding.encodePathSegment(channelId, "UTF-8")}/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.channel.v0.Client.parseJson("io.flow.channel.v0.models.ChannelOrganization", r, _.validate[io.flow.channel.v0.models.ChannelOrganization])
          case r if r.status == 201 => _root_.io.flow.channel.v0.Client.parseJson("io.flow.channel.v0.models.ChannelOrganization", r, _.validate[io.flow.channel.v0.models.ChannelOrganization])
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.channel.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 404, 422")
        }
      }

      override def deleteByKey(
        channelId: String,
        key: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/channel/${play.utils.UriEncoding.encodePathSegment(channelId, "UTF-8")}/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Channels extends Channels {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "name",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.channel.v0.models.Channel]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/channels", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.channel.v0.Client.parseJson("Seq[io.flow.channel.v0.models.Channel]", r, _.validate[Seq[io.flow.channel.v0.models.Channel]])
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.channel.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.Channel] = {
        _executeRequest("GET", s"/channels/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.channel.v0.Client.parseJson("io.flow.channel.v0.models.Channel", r, _.validate[io.flow.channel.v0.models.Channel])
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        channelForm: io.flow.channel.v0.models.ChannelForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.Channel] = {
        val payload = play.api.libs.json.Json.toJson(channelForm)

        _executeRequest("POST", s"/channels", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.channel.v0.Client.parseJson("io.flow.channel.v0.models.Channel", r, _.validate[io.flow.channel.v0.models.Channel])
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.channel.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def putById(
        id: String,
        channelForm: io.flow.channel.v0.models.ChannelForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.Channel] = {
        val payload = play.api.libs.json.Json.toJson(channelForm)

        _executeRequest("PUT", s"/channels/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.channel.v0.Client.parseJson("io.flow.channel.v0.models.Channel", r, _.validate[io.flow.channel.v0.models.Channel])
          case r if r.status == 201 => _root_.io.flow.channel.v0.Client.parseJson("io.flow.channel.v0.models.Channel", r, _.validate[io.flow.channel.v0.models.Channel])
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.channel.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 404, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/channels/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }

      override def postOrganizationsAndTokensByIdAndOrganizationId(
        id: String,
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.OrganizationToken] = {
        _executeRequest("POST", s"/channels/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/tokens", requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.channel.v0.Client.parseJson("io.flow.token.v0.models.OrganizationToken", r, _.validate[io.flow.token.v0.models.OrganizationToken])
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.channel.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 404, 422")
        }
      }

      override def getCurrenciesByChannelId(
        channelId: String,
        id: _root_.scala.Option[Seq[String]] = None,
        currency: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "-created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.channel.v0.models.ChannelCurrency]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          currency.getOrElse(Nil).map("currency" -> _)

        _executeRequest("GET", s"/channels/${play.utils.UriEncoding.encodePathSegment(channelId, "UTF-8")}/currencies", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.channel.v0.Client.parseJson("Seq[io.flow.channel.v0.models.ChannelCurrency]", r, _.validate[Seq[io.flow.channel.v0.models.ChannelCurrency]])
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.channel.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404, 422")
        }
      }

      override def putCurrenciesByChannelId(
        channelId: String,
        channelCurrencyForm: io.flow.channel.v0.models.ChannelCurrencyForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.ChannelCurrency] = {
        val payload = play.api.libs.json.Json.toJson(channelCurrencyForm)

        _executeRequest("PUT", s"/channels/${play.utils.UriEncoding.encodePathSegment(channelId, "UTF-8")}/currencies", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.channel.v0.Client.parseJson("io.flow.channel.v0.models.ChannelCurrency", r, _.validate[io.flow.channel.v0.models.ChannelCurrency])
          case r if r.status == 201 => _root_.io.flow.channel.v0.Client.parseJson("io.flow.channel.v0.models.ChannelCurrency", r, _.validate[io.flow.channel.v0.models.ChannelCurrency])
          case r if r.status == 401 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.channel.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.channel.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 404, 422")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    ): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq("Content-Type" -> "application/json; charset=UTF-8")
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.channel.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def channelAuthorizations: io.flow.channel.v0.ChannelAuthorizations
      def channelOrganizations: io.flow.channel.v0.ChannelOrganizations
      def channels: io.flow.channel.v0.Channels
    }

  }

  trait ChannelAuthorizations {
    def post(
      channelAuthorizationForm: io.flow.channel.v0.models.ChannelAuthorizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.ChannelAuthorization]
  }

  trait ChannelOrganizations {
    /**
     * Returns the list of organizations in a channel, channel is identified by id
     */
    def get(
      channelId: String,
      id: _root_.scala.Option[Seq[String]] = None,
      key: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "name",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.channel.v0.models.ChannelOrganization]]

    def getByKey(
      channelId: String,
      key: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.ChannelOrganization]

    def putByKey(
      channelId: String,
      key: String,
      channelOrganizationForm: io.flow.channel.v0.models.ChannelOrganizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.ChannelOrganization]

    def deleteByKey(
      channelId: String,
      key: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Channels {
    /**
     * Returns the list of channels
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "name",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.channel.v0.models.Channel]]

    /**
     * Returns a channel by id
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.Channel]

    def post(
      channelForm: io.flow.channel.v0.models.ChannelForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.Channel]

    /**
     * Upserts the channel data, channel is identified by id
     */
    def putById(
      id: String,
      channelForm: io.flow.channel.v0.models.ChannelForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.Channel]

    /**
     * Deletes a channel specified by id
     */
    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Creates a token for an organization in the channel identified by id
     */
    def postOrganizationsAndTokensByIdAndOrganizationId(
      id: String,
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.OrganizationToken]

    /**
     * Returns the list of channel currencies
     */
    def getCurrenciesByChannelId(
      channelId: String,
      id: _root_.scala.Option[Seq[String]] = None,
      currency: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.channel.v0.models.ChannelCurrency]]

    def putCurrenciesByChannelId(
      channelId: String,
      channelCurrencyForm: io.flow.channel.v0.models.ChannelCurrencyForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.ChannelCurrency]
  }

  package errors {

    import io.flow.channel.v0.models.json._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.token.v0.models.json._

    final case class GenericErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(s"${response.status}: ${response.body}")) {
      lazy val genericError = _root_.io.flow.channel.v0.Client.parseJson("io.flow.error.v0.models.GenericError", response, _.validate[io.flow.error.v0.models.GenericError])
    }

    final case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}