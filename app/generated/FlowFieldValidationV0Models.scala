/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.10.75
 * apibuilder 0.15.33 app.apibuilder.io/flow/field-validation/latest/play_2_x_json
 */
package io.flow.field.validation.v0.models {

  sealed trait FieldValidationRule extends _root_.scala.Product with _root_.scala.Serializable {
    def fieldValidationRuleDiscriminator: FieldValidationRuleDiscriminator

  }

  /**
   * Defines the valid discriminator values for the type FieldValidationRule
   */
  sealed trait FieldValidationRuleDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object FieldValidationRuleDiscriminator {

    case object FieldValidationRequired extends FieldValidationRuleDiscriminator { override def toString = "required" }
    case object FieldValidationRequiredIfPresent extends FieldValidationRuleDiscriminator { override def toString = "required_if_present" }
    case object FieldValidationMin extends FieldValidationRuleDiscriminator { override def toString = "min" }
    case object FieldValidationMax extends FieldValidationRuleDiscriminator { override def toString = "max" }
    case object FieldValidationPattern extends FieldValidationRuleDiscriminator { override def toString = "pattern" }

    final case class UNDEFINED(override val toString: String) extends FieldValidationRuleDiscriminator

    val all: scala.List[FieldValidationRuleDiscriminator] = scala.List(FieldValidationRequired, FieldValidationRequiredIfPresent, FieldValidationMin, FieldValidationMax, FieldValidationPattern)

    private[this] val byName: Map[String, FieldValidationRuleDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): FieldValidationRuleDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[FieldValidationRuleDiscriminator] = byName.get(value.toLowerCase)

  }
  /**
   * @param length Maximum specified length of characters in the form field for text or the maximum
   *        number of elements for a list.
   */

  final case class FieldValidationMax(
    length: Int
  ) extends FieldValidationRule {
    override val fieldValidationRuleDiscriminator: FieldValidationRuleDiscriminator = FieldValidationRuleDiscriminator.FieldValidationMax
  }

  /**
   * @param length Minimum specified length of characters in the form field for text or the maximum
   *        number of elements for a list.
   */

  final case class FieldValidationMin(
    length: Int
  ) extends FieldValidationRule {
    override val fieldValidationRuleDiscriminator: FieldValidationRuleDiscriminator = FieldValidationRuleDiscriminator.FieldValidationMin
  }

  /**
   * @param pattern Regular expression used to pattern match a valid string
   */

  final case class FieldValidationPattern(
    pattern: String
  ) extends FieldValidationRule {
    override val fieldValidationRuleDiscriminator: FieldValidationRuleDiscriminator = FieldValidationRuleDiscriminator.FieldValidationPattern
  }

  /**
   * Indicates a field is required
   *
   * @param placeholder Field is a placeholder as required by API Builder
   */

  final case class FieldValidationRequired(
    placeholder: _root_.scala.Option[String] = None
  ) extends FieldValidationRule {
    override val fieldValidationRuleDiscriminator: FieldValidationRuleDiscriminator = FieldValidationRuleDiscriminator.FieldValidationRequired
  }

  /**
   * Indicates a field is required if it is presented in the user interface
   *
   * @param placeholder Field is a placeholder as required by API Builder
   */

  final case class FieldValidationRequiredIfPresent(
    placeholder: _root_.scala.Option[String] = None
  ) extends FieldValidationRule {
    override val fieldValidationRuleDiscriminator: FieldValidationRuleDiscriminator = FieldValidationRuleDiscriminator.FieldValidationRequiredIfPresent
  }

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union FieldValidationRule, it will need to be handled in the client code.
   * This implementation will deserialize these future types as an instance of this
   * class.
   *
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */

  final case class FieldValidationRuleUndefinedType(
    description: String
  ) extends FieldValidationRule {
    override val fieldValidationRuleDiscriminator: FieldValidationRuleDiscriminator = FieldValidationRuleDiscriminator.UNDEFINED(description)
  }

}

package io.flow.field.validation.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.field.validation.v0.models.json._

    private[v0] implicit val jsonReadsUUID: play.api.libs.json.Reads[_root_.java.util.UUID] = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID: play.api.libs.json.Writes[_root_.java.util.UUID] = (x: _root_.java.util.UUID) => play.api.libs.json.JsString(x.toString)

    private[v0] implicit val jsonReadsJodaDateTime: play.api.libs.json.Reads[_root_.org.joda.time.DateTime] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime: play.api.libs.json.Writes[_root_.org.joda.time.DateTime] = (x: _root_.org.joda.time.DateTime) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
    }

    private[v0] implicit val jsonReadsJodaLocalDate: play.api.libs.json.Reads[_root_.org.joda.time.LocalDate] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate: play.api.libs.json.Writes[_root_.org.joda.time.LocalDate] = (x: _root_.org.joda.time.LocalDate) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
    }

    implicit def jsonReadsFieldValidationFieldValidationMax: play.api.libs.json.Reads[FieldValidationMax] = {
      (__ \ "length").read[Int].map { x => new FieldValidationMax(length = x) }
    }

    def jsObjectFieldValidationMax(obj: io.flow.field.validation.v0.models.FieldValidationMax): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "length" -> play.api.libs.json.JsNumber(obj.length)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "max")
    }

    implicit def jsonWritesFieldValidationFieldValidationMax: play.api.libs.json.Writes[FieldValidationMax] = {
      (obj: io.flow.field.validation.v0.models.FieldValidationMax) => {
        jsObjectFieldValidationMax(obj)
      }
    }

    implicit def jsonReadsFieldValidationFieldValidationMin: play.api.libs.json.Reads[FieldValidationMin] = {
      (__ \ "length").read[Int].map { x => new FieldValidationMin(length = x) }
    }

    def jsObjectFieldValidationMin(obj: io.flow.field.validation.v0.models.FieldValidationMin): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "length" -> play.api.libs.json.JsNumber(obj.length)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "min")
    }

    implicit def jsonWritesFieldValidationFieldValidationMin: play.api.libs.json.Writes[FieldValidationMin] = {
      (obj: io.flow.field.validation.v0.models.FieldValidationMin) => {
        jsObjectFieldValidationMin(obj)
      }
    }

    implicit def jsonReadsFieldValidationFieldValidationPattern: play.api.libs.json.Reads[FieldValidationPattern] = {
      (__ \ "pattern").read[String].map { x => new FieldValidationPattern(pattern = x) }
    }

    def jsObjectFieldValidationPattern(obj: io.flow.field.validation.v0.models.FieldValidationPattern): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "pattern" -> play.api.libs.json.JsString(obj.pattern)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "pattern")
    }

    implicit def jsonWritesFieldValidationFieldValidationPattern: play.api.libs.json.Writes[FieldValidationPattern] = {
      (obj: io.flow.field.validation.v0.models.FieldValidationPattern) => {
        jsObjectFieldValidationPattern(obj)
      }
    }

    implicit def jsonReadsFieldValidationFieldValidationRequired: play.api.libs.json.Reads[FieldValidationRequired] = {
      (__ \ "placeholder").readNullable[String].map { x => new FieldValidationRequired(placeholder = x) }
    }

    def jsObjectFieldValidationRequired(obj: io.flow.field.validation.v0.models.FieldValidationRequired): play.api.libs.json.JsObject = {
      (obj.placeholder match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("placeholder" -> play.api.libs.json.JsString(x))
      }) ++ play.api.libs.json.Json.obj("discriminator" -> "required")
    }

    implicit def jsonWritesFieldValidationFieldValidationRequired: play.api.libs.json.Writes[FieldValidationRequired] = {
      (obj: io.flow.field.validation.v0.models.FieldValidationRequired) => {
        jsObjectFieldValidationRequired(obj)
      }
    }

    implicit def jsonReadsFieldValidationFieldValidationRequiredIfPresent: play.api.libs.json.Reads[FieldValidationRequiredIfPresent] = {
      (__ \ "placeholder").readNullable[String].map { x => new FieldValidationRequiredIfPresent(placeholder = x) }
    }

    def jsObjectFieldValidationRequiredIfPresent(obj: io.flow.field.validation.v0.models.FieldValidationRequiredIfPresent): play.api.libs.json.JsObject = {
      (obj.placeholder match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("placeholder" -> play.api.libs.json.JsString(x))
      }) ++ play.api.libs.json.Json.obj("discriminator" -> "required_if_present")
    }

    implicit def jsonWritesFieldValidationFieldValidationRequiredIfPresent: play.api.libs.json.Writes[FieldValidationRequiredIfPresent] = {
      (obj: io.flow.field.validation.v0.models.FieldValidationRequiredIfPresent) => {
        jsObjectFieldValidationRequiredIfPresent(obj)
      }
    }

    implicit def jsonReadsFieldValidationFieldValidationRule: play.api.libs.json.Reads[FieldValidationRule] = (js: play.api.libs.json.JsValue) => {
      def readDiscriminator(discriminator: String) = {
        discriminator match {
          case "required" => js.validate[io.flow.field.validation.v0.models.FieldValidationRequired]
          case "required_if_present" => js.validate[io.flow.field.validation.v0.models.FieldValidationRequiredIfPresent]
          case "min" => js.validate[io.flow.field.validation.v0.models.FieldValidationMin]
          case "max" => js.validate[io.flow.field.validation.v0.models.FieldValidationMax]
          case "pattern" => js.validate[io.flow.field.validation.v0.models.FieldValidationPattern]
          case other => play.api.libs.json.JsSuccess(io.flow.field.validation.v0.models.FieldValidationRuleUndefinedType(other))
        }
      }
      (js \ "discriminator").validate[String] match {
        case e: play.api.libs.json.JsError => e
        case s: play.api.libs.json.JsSuccess[String] => readDiscriminator(s.value)
      }
    }

    def jsObjectFieldValidationRule(obj: io.flow.field.validation.v0.models.FieldValidationRule): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.field.validation.v0.models.FieldValidationRequired => jsObjectFieldValidationRequired(x)
        case x: io.flow.field.validation.v0.models.FieldValidationRequiredIfPresent => jsObjectFieldValidationRequiredIfPresent(x)
        case x: io.flow.field.validation.v0.models.FieldValidationMin => jsObjectFieldValidationMin(x)
        case x: io.flow.field.validation.v0.models.FieldValidationMax => jsObjectFieldValidationMax(x)
        case x: io.flow.field.validation.v0.models.FieldValidationPattern => jsObjectFieldValidationPattern(x)
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesFieldValidationFieldValidationRule: play.api.libs.json.Writes[FieldValidationRule] = {
      (obj: io.flow.field.validation.v0.models.FieldValidationRule) => {
        jsObjectFieldValidationRule(obj)
      }
    }
  }
}

package io.flow.field.validation.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}
