/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.10.59
 * apibuilder 0.15.33 app.apibuilder.io/flow/merchant-of-record/latest/play_2_x_json
 */
package io.flow.merchant.of.record.v0.models {

  sealed trait EconomicTitleLocation extends _root_.scala.Product with _root_.scala.Serializable

  object EconomicTitleLocation {

    /**
     * Indicates title transferred on the high seas
     */
    case object HighSeas extends EconomicTitleLocation { override def toString = "high_seas" }
    /**
     * Indicates title transferred at the originating fulfillment center
     */
    case object Origination extends EconomicTitleLocation { override def toString = "origination" }
    /**
     * Indicates title transferred at the destination
     */
    case object Destination extends EconomicTitleLocation { override def toString = "destination" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends EconomicTitleLocation

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[EconomicTitleLocation] = scala.List(HighSeas, Origination, Destination)

    private[this]
    val byName: Map[String, EconomicTitleLocation] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): EconomicTitleLocation = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[EconomicTitleLocation] = byName.get(value.toLowerCase)

  }

  sealed trait FlowEntity extends _root_.scala.Product with _root_.scala.Serializable

  object FlowEntity {

    /**
     * Flow Commerce Inc., Hoboken, NJ, USA
     */
    case object FlowUsa extends FlowEntity { override def toString = "flow-usa" }
    /**
     * Flow Commerce Ltd., Dublin, IRL
     */
    case object FlowIrl extends FlowEntity { override def toString = "flow-irl" }
    /**
     * Flow Commerce Canada Inc., Vancouver, BC, CAN
     */
    case object FlowCan extends FlowEntity { override def toString = "flow-can" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends FlowEntity

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[FlowEntity] = scala.List(FlowUsa, FlowIrl, FlowCan)

    private[this]
    val byName: Map[String, FlowEntity] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): FlowEntity = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[FlowEntity] = byName.get(value.toLowerCase)

  }

}

package io.flow.merchant.of.record.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.merchant.of.record.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID = new Writes[_root_.java.util.UUID] {
      def writes(x: _root_.java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[_root_.org.joda.time.DateTime] {
      def writes(x: _root_.org.joda.time.DateTime) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[_root_.org.joda.time.LocalDate] {
      def writes(x: _root_.org.joda.time.LocalDate) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
      }
    }

    implicit val jsonReadsMerchantOfRecordEconomicTitleLocation = new play.api.libs.json.Reads[io.flow.merchant.of.record.v0.models.EconomicTitleLocation] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.merchant.of.record.v0.models.EconomicTitleLocation] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.merchant.of.record.v0.models.EconomicTitleLocation(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.merchant.of.record.v0.models.EconomicTitleLocation(v))
              case err: play.api.libs.json.JsError =>
                (js \ "economic_title_location").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.merchant.of.record.v0.models.EconomicTitleLocation(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesMerchantOfRecordEconomicTitleLocation(obj: io.flow.merchant.of.record.v0.models.EconomicTitleLocation) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectEconomicTitleLocation(obj: io.flow.merchant.of.record.v0.models.EconomicTitleLocation) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesMerchantOfRecordEconomicTitleLocation: play.api.libs.json.Writes[EconomicTitleLocation] = {
      new play.api.libs.json.Writes[io.flow.merchant.of.record.v0.models.EconomicTitleLocation] {
        def writes(obj: io.flow.merchant.of.record.v0.models.EconomicTitleLocation) = {
          jsonWritesMerchantOfRecordEconomicTitleLocation(obj)
        }
      }
    }

    implicit val jsonReadsMerchantOfRecordFlowEntity = new play.api.libs.json.Reads[io.flow.merchant.of.record.v0.models.FlowEntity] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.merchant.of.record.v0.models.FlowEntity] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.merchant.of.record.v0.models.FlowEntity(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.merchant.of.record.v0.models.FlowEntity(v))
              case err: play.api.libs.json.JsError =>
                (js \ "flow_entity").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.merchant.of.record.v0.models.FlowEntity(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesMerchantOfRecordFlowEntity(obj: io.flow.merchant.of.record.v0.models.FlowEntity) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectFlowEntity(obj: io.flow.merchant.of.record.v0.models.FlowEntity) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesMerchantOfRecordFlowEntity: play.api.libs.json.Writes[FlowEntity] = {
      new play.api.libs.json.Writes[io.flow.merchant.of.record.v0.models.FlowEntity] {
        def writes(obj: io.flow.merchant.of.record.v0.models.FlowEntity) = {
          jsonWritesMerchantOfRecordFlowEntity(obj)
        }
      }
    }
  }
}

package io.flow.merchant.of.record.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.flow.merchant.of.record.v0.models._

      val economicTitleLocationConverter: ApibuilderTypeConverter[io.flow.merchant.of.record.v0.models.EconomicTitleLocation] = new ApibuilderTypeConverter[io.flow.merchant.of.record.v0.models.EconomicTitleLocation] {
        override def convert(value: String): io.flow.merchant.of.record.v0.models.EconomicTitleLocation = io.flow.merchant.of.record.v0.models.EconomicTitleLocation(value)
        override def convert(value: io.flow.merchant.of.record.v0.models.EconomicTitleLocation): String = value.toString
        override def example: io.flow.merchant.of.record.v0.models.EconomicTitleLocation = io.flow.merchant.of.record.v0.models.EconomicTitleLocation.HighSeas
        override def validValues: Seq[io.flow.merchant.of.record.v0.models.EconomicTitleLocation] = io.flow.merchant.of.record.v0.models.EconomicTitleLocation.all
      }
      implicit def pathBindableEconomicTitleLocation(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.merchant.of.record.v0.models.EconomicTitleLocation] = ApibuilderPathBindable(economicTitleLocationConverter)
      implicit def queryStringBindableEconomicTitleLocation(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.merchant.of.record.v0.models.EconomicTitleLocation] = ApibuilderQueryStringBindable(economicTitleLocationConverter)

      val flowEntityConverter: ApibuilderTypeConverter[io.flow.merchant.of.record.v0.models.FlowEntity] = new ApibuilderTypeConverter[io.flow.merchant.of.record.v0.models.FlowEntity] {
        override def convert(value: String): io.flow.merchant.of.record.v0.models.FlowEntity = io.flow.merchant.of.record.v0.models.FlowEntity(value)
        override def convert(value: io.flow.merchant.of.record.v0.models.FlowEntity): String = value.toString
        override def example: io.flow.merchant.of.record.v0.models.FlowEntity = io.flow.merchant.of.record.v0.models.FlowEntity.FlowUsa
        override def validValues: Seq[io.flow.merchant.of.record.v0.models.FlowEntity] = io.flow.merchant.of.record.v0.models.FlowEntity.all
      }
      implicit def pathBindableFlowEntity(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.merchant.of.record.v0.models.FlowEntity] = ApibuilderPathBindable(flowEntityConverter)
      implicit def queryStringBindableFlowEntity(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.merchant.of.record.v0.models.FlowEntity] = ApibuilderQueryStringBindable(flowEntityConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}
