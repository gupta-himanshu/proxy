/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.10.75
 * apibuilder 0.15.33 app.apibuilder.io/flow/session/latest/play_2_8_client
 */
package io.flow.session.v0.models {

  sealed trait Session extends _root_.scala.Product with _root_.scala.Serializable {
    def sessionDiscriminator: SessionDiscriminator

  }

  /**
   * Defines the valid discriminator values for the type Session
   */
  sealed trait SessionDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object SessionDiscriminator {

    case object OrganizationSession extends SessionDiscriminator { override def toString = "organization_session" }

    final case class UNDEFINED(override val toString: String) extends SessionDiscriminator

    val all: scala.List[SessionDiscriminator] = scala.List(OrganizationSession)

    private[this] val byName: Map[String, SessionDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): SessionDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[SessionDiscriminator] = byName.get(value.toLowerCase)

  }

  sealed trait SessionAuthorization extends _root_.scala.Product with _root_.scala.Serializable {
    def sessionAuthorizationDiscriminator: SessionAuthorizationDiscriminator

  }

  /**
   * Defines the valid discriminator values for the type SessionAuthorization
   */
  sealed trait SessionAuthorizationDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object SessionAuthorizationDiscriminator {

    case object OrganizationSessionAuthorization extends SessionAuthorizationDiscriminator { override def toString = "organization_session_authorization" }

    final case class UNDEFINED(override val toString: String) extends SessionAuthorizationDiscriminator

    val all: scala.List[SessionAuthorizationDiscriminator] = scala.List(OrganizationSessionAuthorization)

    private[this] val byName: Map[String, SessionAuthorizationDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): SessionAuthorizationDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[SessionAuthorizationDiscriminator] = byName.get(value.toLowerCase)

  }
  /**
   * @param id Equivalent of the cart token
   */

  final case class CartReference(
    id: String
  )

  /**
   * If we found an experience for the given session, the localized information will
   * be presented here
   */

  @deprecated("Going forward, use session.geo and session.experience directly")
  final case class LocalSession(
    country: io.flow.reference.v0.models.Country,
    currency: io.flow.reference.v0.models.Currency,
    language: io.flow.reference.v0.models.Language,
    locale: io.flow.reference.v0.models.Locale,
    experience: io.flow.experience.v0.models.ExperienceGeo,
    experiment: _root_.scala.Option[io.flow.session.v0.models.SessionExperiment] = None
  )

  /**
   * Represents a session created for an organization. Primary method to select an
   * experience for a given user session and ensure that experience does not change
   * throughout the user's activity. Provides authentication to objects created
   * during this session (e.g. order).
   *
   * @param environment The Flow organization environment
   * @param ip The latest IP Address associated with this session, if known
   * @param geo The geolocated information for this particular session. Note will always be
   *        present. Marked optional for backwards compatibility
   * @param experience Present if the session maps to an enabled experience
   */

  final case class OrganizationSession(
    id: String,
    organization: String,
    visitor: io.flow.session.v0.models.SessionVisitor,
    visit: io.flow.session.v0.models.SessionVisit,
    environment: io.flow.common.v0.models.Environment,
    attributes: Map[String, String],
    ip: _root_.scala.Option[String] = None,
    local: _root_.scala.Option[io.flow.session.v0.models.LocalSession] = None,
    geo: _root_.scala.Option[io.flow.session.v0.models.SessionGeo] = None,
    experience: _root_.scala.Option[io.flow.experience.v0.models.ExperienceGeo] = None,
    format: _root_.scala.Option[io.flow.session.v0.models.SessionFormat] = None,
    experiment: _root_.scala.Option[io.flow.session.v0.models.SessionExperiment] = None,
    context: _root_.scala.Option[io.flow.session.context.v0.models.ContextReference] = None
  ) extends Session {
    override val sessionDiscriminator: SessionDiscriminator = SessionDiscriminator.OrganizationSession
  }

  /**
   * Represents a session authorized access to the specified organization's data
   */

  final case class OrganizationSessionAuthorization(
    organization: io.flow.common.v0.models.OrganizationReference,
    environment: io.flow.common.v0.models.Environment
  ) extends SessionAuthorization {
    override val sessionAuthorizationDiscriminator: SessionAuthorizationDiscriminator = SessionAuthorizationDiscriminator.OrganizationSessionAuthorization
  }

  /**
   * Authorize a request using a session id
   *
   * @param session The session Id
   */

  final case class SessionAuthorizationForm(
    session: String
  )

  final case class SessionCurrencyFormat(
    symbol: io.flow.common.v0.models.CurrencySymbolFormat,
    labelFormatters: Seq[io.flow.common.v0.models.CurrencyLabelFormatter]
  )

  /**
   * Experiment for A/B testing
   */

  final case class SessionExperiment(
    key: String,
    variant: _root_.scala.Option[io.flow.session.v0.models.SessionExperimentVariant] = None
  )

  final case class SessionExperimentForm(
    key: String,
    variant: _root_.scala.Option[io.flow.session.v0.models.SessionExperimentVariantForm] = None
  )

  /**
   * Experiment variant. Control or variant
   */

  final case class SessionExperimentVariant(
    key: String,
    name: String
  )

  final case class SessionExperimentVariantForm(
    key: String
  )

  /**
   * Configures session expiration time. We default to 30 minutes to follow Google
   * Analytics
   */

  final case class SessionExpirationConfig(
    unit: io.flow.common.v0.models.UnitOfTime = io.flow.common.v0.models.UnitOfTime.Minute,
    value: Long = 30L
  )

  /**
   * @param ip If specified, we will geolocate the user by this IP address, and if successful,
   *        select the experience matching the country of the IP address.
   * @param experience If specified, we will render the items in the context of the experience with
   *        this key.
   * @param country The ISO 3166-3 country code. Case insensitive. See
   *        https://api.flow.io/reference/countries
   * @param currency Iso 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   *        If specified, translate the pricing to this currency. Translation occurs using
   *        the current spot rate for this currency from the base currency in the
   *        experience.
   * @param language ISO 639 2 language code as defined in https://api.flow.io/reference/languages If
   *        specified, translate content to this language (where available)
   * @param locale Locale ID as defined in https://api.flow.io/reference/locales
   */

  final case class SessionForm(
    ip: _root_.scala.Option[String] = None,
    experience: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None,
    currency: _root_.scala.Option[String] = None,
    language: _root_.scala.Option[String] = None,
    locale: _root_.scala.Option[String] = None,
    attributes: _root_.scala.Option[Map[String, String]] = None
  )

  final case class SessionFormat(
    currency: io.flow.session.v0.models.SessionCurrencyFormat
  )

  /**
   * The geolocated information for this session
   */

  final case class SessionGeo(
    country: io.flow.reference.v0.models.Country,
    currency: io.flow.reference.v0.models.Currency,
    language: io.flow.reference.v0.models.Language,
    locale: io.flow.reference.v0.models.Locale
  )

  /**
   * @param ip If specified, we will geolocate the user by this IP address, and if successful,
   *        select the experience matching the country of the IP address.
   * @param experience If specified, we will render the items in the context of the experience with
   *        this key.
   * @param country The ISO 3166-3 country code. Case insensitive. See
   *        https://api.flow.io/reference/countries
   * @param currency Iso 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   *        If specified, translate the pricing to this currency. Translation occurs using
   *        the current spot rate for this currency from the base currency in the
   *        experience.
   * @param language ISO 639 2 language code as defined in https://api.flow.io/reference/languages If
   *        specified, translate content to this language (where available)
   * @param locale Locale ID as defined in https://api.flow.io/reference/locales
   */

  final case class SessionPutForm(
    ip: _root_.scala.Option[String] = None,
    experience: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None,
    currency: _root_.scala.Option[String] = None,
    language: _root_.scala.Option[String] = None,
    locale: _root_.scala.Option[String] = None,
    attributes: _root_.scala.Option[Map[String, String]] = None
  )

  /**
   * A session visit expires after a configurable period of inactivity (e.g. 30
   * minutes).
   *
   * @param expiresAt The date / time on which this visit expires. The default session duration may
   *        vary by organization.
   */

  final case class SessionVisit(
    id: String,
    expiresAt: _root_.org.joda.time.DateTime
  )

  /**
   * A session visitor is a unique identifier for our best guess as to who the
   * individual user is interacting with Flow.
   */

  final case class SessionVisitor(
    id: String
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Session, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   *
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */

  final case class SessionUndefinedType(
    description: String
  ) extends Session {
    override val sessionDiscriminator: SessionDiscriminator = SessionDiscriminator.UNDEFINED(description)
  }

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union SessionAuthorization, it will need to be handled in the client
   * code. This implementation will deserialize these future types as an instance of
   * this class.
   *
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */

  final case class SessionAuthorizationUndefinedType(
    description: String
  ) extends SessionAuthorization {
    override val sessionAuthorizationDiscriminator: SessionAuthorizationDiscriminator = SessionAuthorizationDiscriminator.UNDEFINED(description)
  }

}

package io.flow.session.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.experience.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.reference.v0.models.json._
    import io.flow.session.context.v0.models.json._
    import io.flow.session.v0.models.json._

    private[v0] implicit val jsonReadsUUID: play.api.libs.json.Reads[_root_.java.util.UUID] = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID: play.api.libs.json.Writes[_root_.java.util.UUID] = (x: _root_.java.util.UUID) => play.api.libs.json.JsString(x.toString)

    private[v0] implicit val jsonReadsJodaDateTime: play.api.libs.json.Reads[_root_.org.joda.time.DateTime] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime: play.api.libs.json.Writes[_root_.org.joda.time.DateTime] = (x: _root_.org.joda.time.DateTime) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
    }

    private[v0] implicit val jsonReadsJodaLocalDate: play.api.libs.json.Reads[_root_.org.joda.time.LocalDate] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate: play.api.libs.json.Writes[_root_.org.joda.time.LocalDate] = (x: _root_.org.joda.time.LocalDate) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
    }

    implicit def jsonReadsSessionCartReference: play.api.libs.json.Reads[CartReference] = {
      (__ \ "id").read[String].map { x => new CartReference(id = x) }
    }

    def jsObjectCartReference(obj: io.flow.session.v0.models.CartReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesSessionCartReference: play.api.libs.json.Writes[CartReference] = {
      (obj: io.flow.session.v0.models.CartReference) => {
        jsObjectCartReference(obj)
      }
    }

    implicit def jsonReadsSessionLocalSession: play.api.libs.json.Reads[LocalSession] = {
      for {
        country <- (__ \ "country").read[io.flow.reference.v0.models.Country]
        currency <- (__ \ "currency").read[io.flow.reference.v0.models.Currency]
        language <- (__ \ "language").read[io.flow.reference.v0.models.Language]
        locale <- (__ \ "locale").read[io.flow.reference.v0.models.Locale]
        experience <- (__ \ "experience").read[io.flow.experience.v0.models.ExperienceGeo]
        experiment <- (__ \ "experiment").readNullable[io.flow.session.v0.models.SessionExperiment]
      } yield LocalSession(country, currency, language, locale, experience, experiment)
    }

    def jsObjectLocalSession(obj: io.flow.session.v0.models.LocalSession): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "country" -> io.flow.reference.v0.models.json.jsObjectCountry(obj.country),
        "currency" -> io.flow.reference.v0.models.json.jsObjectCurrency(obj.currency),
        "language" -> io.flow.reference.v0.models.json.jsObjectLanguage(obj.language),
        "locale" -> io.flow.reference.v0.models.json.jsObjectLocale(obj.locale),
        "experience" -> io.flow.experience.v0.models.json.jsObjectExperienceGeo(obj.experience)
      ) ++ (obj.experiment match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("experiment" -> jsObjectSessionExperiment(x))
      })
    }

    implicit def jsonWritesSessionLocalSession: play.api.libs.json.Writes[LocalSession] = {
      (obj: io.flow.session.v0.models.LocalSession) => {
        jsObjectLocalSession(obj)
      }
    }

    implicit def jsonReadsSessionOrganizationSession: play.api.libs.json.Reads[OrganizationSession] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[String]
        visitor <- (__ \ "visitor").read[io.flow.session.v0.models.SessionVisitor]
        visit <- (__ \ "visit").read[io.flow.session.v0.models.SessionVisit]
        environment <- (__ \ "environment").read[io.flow.common.v0.models.Environment]
        attributes <- (__ \ "attributes").read[Map[String, String]]
        ip <- (__ \ "ip").readNullable[String]
        local <- (__ \ "local").readNullable[io.flow.session.v0.models.LocalSession]
        geo <- (__ \ "geo").readNullable[io.flow.session.v0.models.SessionGeo]
        experience <- (__ \ "experience").readNullable[io.flow.experience.v0.models.ExperienceGeo]
        format <- (__ \ "format").readNullable[io.flow.session.v0.models.SessionFormat]
        experiment <- (__ \ "experiment").readNullable[io.flow.session.v0.models.SessionExperiment]
        context <- (__ \ "context").readNullable[io.flow.session.context.v0.models.ContextReference]
      } yield OrganizationSession(id, organization, visitor, visit, environment, attributes, ip, local, geo, experience, format, experiment, context)
    }

    def jsObjectOrganizationSession(obj: io.flow.session.v0.models.OrganizationSession): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "visitor" -> jsObjectSessionVisitor(obj.visitor),
        "visit" -> jsObjectSessionVisit(obj.visit),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.ip match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("ip" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.local match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("local" -> jsObjectLocalSession(x))
      }) ++
      (obj.geo match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("geo" -> jsObjectSessionGeo(x))
      }) ++
      (obj.experience match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("experience" -> io.flow.experience.v0.models.json.jsObjectExperienceGeo(x))
      }) ++
      (obj.format match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("format" -> jsObjectSessionFormat(x))
      }) ++
      (obj.experiment match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("experiment" -> jsObjectSessionExperiment(x))
      }) ++
      (obj.context match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("context" -> io.flow.session.context.v0.models.json.jsObjectContextReference(x))
      }) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_session")
    }

    implicit def jsonWritesSessionOrganizationSession: play.api.libs.json.Writes[OrganizationSession] = {
      (obj: io.flow.session.v0.models.OrganizationSession) => {
        jsObjectOrganizationSession(obj)
      }
    }

    implicit def jsonReadsSessionOrganizationSessionAuthorization: play.api.libs.json.Reads[OrganizationSessionAuthorization] = {
      for {
        organization <- (__ \ "organization").read[io.flow.common.v0.models.OrganizationReference]
        environment <- (__ \ "environment").read[io.flow.common.v0.models.Environment]
      } yield OrganizationSessionAuthorization(organization, environment)
    }

    def jsObjectOrganizationSessionAuthorization(obj: io.flow.session.v0.models.OrganizationSessionAuthorization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> io.flow.common.v0.models.json.jsObjectOrganizationReference(obj.organization),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_session_authorization")
    }

    implicit def jsonWritesSessionOrganizationSessionAuthorization: play.api.libs.json.Writes[OrganizationSessionAuthorization] = {
      (obj: io.flow.session.v0.models.OrganizationSessionAuthorization) => {
        jsObjectOrganizationSessionAuthorization(obj)
      }
    }

    implicit def jsonReadsSessionSessionAuthorizationForm: play.api.libs.json.Reads[SessionAuthorizationForm] = {
      (__ \ "session").read[String].map { x => new SessionAuthorizationForm(session = x) }
    }

    def jsObjectSessionAuthorizationForm(obj: io.flow.session.v0.models.SessionAuthorizationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "session" -> play.api.libs.json.JsString(obj.session)
      )
    }

    implicit def jsonWritesSessionSessionAuthorizationForm: play.api.libs.json.Writes[SessionAuthorizationForm] = {
      (obj: io.flow.session.v0.models.SessionAuthorizationForm) => {
        jsObjectSessionAuthorizationForm(obj)
      }
    }

    implicit def jsonReadsSessionSessionCurrencyFormat: play.api.libs.json.Reads[SessionCurrencyFormat] = {
      for {
        symbol <- (__ \ "symbol").read[io.flow.common.v0.models.CurrencySymbolFormat]
        labelFormatters <- (__ \ "label_formatters").read[Seq[io.flow.common.v0.models.CurrencyLabelFormatter]]
      } yield SessionCurrencyFormat(symbol, labelFormatters)
    }

    def jsObjectSessionCurrencyFormat(obj: io.flow.session.v0.models.SessionCurrencyFormat): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "symbol" -> play.api.libs.json.JsString(obj.symbol.toString),
        "label_formatters" -> play.api.libs.json.Json.toJson(obj.labelFormatters)
      )
    }

    implicit def jsonWritesSessionSessionCurrencyFormat: play.api.libs.json.Writes[SessionCurrencyFormat] = {
      (obj: io.flow.session.v0.models.SessionCurrencyFormat) => {
        jsObjectSessionCurrencyFormat(obj)
      }
    }

    implicit def jsonReadsSessionSessionExperiment: play.api.libs.json.Reads[SessionExperiment] = {
      for {
        key <- (__ \ "key").read[String]
        variant <- (__ \ "variant").readNullable[io.flow.session.v0.models.SessionExperimentVariant]
      } yield SessionExperiment(key, variant)
    }

    def jsObjectSessionExperiment(obj: io.flow.session.v0.models.SessionExperiment): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key)
      ) ++ (obj.variant match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("variant" -> jsObjectSessionExperimentVariant(x))
      })
    }

    implicit def jsonWritesSessionSessionExperiment: play.api.libs.json.Writes[SessionExperiment] = {
      (obj: io.flow.session.v0.models.SessionExperiment) => {
        jsObjectSessionExperiment(obj)
      }
    }

    implicit def jsonReadsSessionSessionExperimentForm: play.api.libs.json.Reads[SessionExperimentForm] = {
      for {
        key <- (__ \ "key").read[String]
        variant <- (__ \ "variant").readNullable[io.flow.session.v0.models.SessionExperimentVariantForm]
      } yield SessionExperimentForm(key, variant)
    }

    def jsObjectSessionExperimentForm(obj: io.flow.session.v0.models.SessionExperimentForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key)
      ) ++ (obj.variant match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("variant" -> jsObjectSessionExperimentVariantForm(x))
      })
    }

    implicit def jsonWritesSessionSessionExperimentForm: play.api.libs.json.Writes[SessionExperimentForm] = {
      (obj: io.flow.session.v0.models.SessionExperimentForm) => {
        jsObjectSessionExperimentForm(obj)
      }
    }

    implicit def jsonReadsSessionSessionExperimentVariant: play.api.libs.json.Reads[SessionExperimentVariant] = {
      for {
        key <- (__ \ "key").read[String]
        name <- (__ \ "name").read[String]
      } yield SessionExperimentVariant(key, name)
    }

    def jsObjectSessionExperimentVariant(obj: io.flow.session.v0.models.SessionExperimentVariant): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesSessionSessionExperimentVariant: play.api.libs.json.Writes[SessionExperimentVariant] = {
      (obj: io.flow.session.v0.models.SessionExperimentVariant) => {
        jsObjectSessionExperimentVariant(obj)
      }
    }

    implicit def jsonReadsSessionSessionExperimentVariantForm: play.api.libs.json.Reads[SessionExperimentVariantForm] = {
      (__ \ "key").read[String].map { x => new SessionExperimentVariantForm(key = x) }
    }

    def jsObjectSessionExperimentVariantForm(obj: io.flow.session.v0.models.SessionExperimentVariantForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonWritesSessionSessionExperimentVariantForm: play.api.libs.json.Writes[SessionExperimentVariantForm] = {
      (obj: io.flow.session.v0.models.SessionExperimentVariantForm) => {
        jsObjectSessionExperimentVariantForm(obj)
      }
    }

    implicit def jsonReadsSessionSessionExpirationConfig: play.api.libs.json.Reads[SessionExpirationConfig] = {
      for {
        unit <- (__ \ "unit").read[io.flow.common.v0.models.UnitOfTime]
        value <- (__ \ "value").read[Long]
      } yield SessionExpirationConfig(unit, value)
    }

    def jsObjectSessionExpirationConfig(obj: io.flow.session.v0.models.SessionExpirationConfig): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "unit" -> play.api.libs.json.JsString(obj.unit.toString),
        "value" -> play.api.libs.json.JsNumber(obj.value)
      )
    }

    implicit def jsonWritesSessionSessionExpirationConfig: play.api.libs.json.Writes[SessionExpirationConfig] = {
      (obj: io.flow.session.v0.models.SessionExpirationConfig) => {
        jsObjectSessionExpirationConfig(obj)
      }
    }

    implicit def jsonReadsSessionSessionForm: play.api.libs.json.Reads[SessionForm] = {
      for {
        ip <- (__ \ "ip").readNullable[String]
        experience <- (__ \ "experience").readNullable[String]
        country <- (__ \ "country").readNullable[String]
        currency <- (__ \ "currency").readNullable[String]
        language <- (__ \ "language").readNullable[String]
        locale <- (__ \ "locale").readNullable[String]
        attributes <- (__ \ "attributes").readNullable[Map[String, String]]
      } yield SessionForm(ip, experience, country, currency, language, locale, attributes)
    }

    def jsObjectSessionForm(obj: io.flow.session.v0.models.SessionForm): play.api.libs.json.JsObject = {
      (obj.ip match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("ip" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.experience match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("experience" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.currency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("currency" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.language match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("language" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.locale match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("locale" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.attributes match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("attributes" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesSessionSessionForm: play.api.libs.json.Writes[SessionForm] = {
      (obj: io.flow.session.v0.models.SessionForm) => {
        jsObjectSessionForm(obj)
      }
    }

    implicit def jsonReadsSessionSessionFormat: play.api.libs.json.Reads[SessionFormat] = {
      (__ \ "currency").read[io.flow.session.v0.models.SessionCurrencyFormat].map { x => new SessionFormat(currency = x) }
    }

    def jsObjectSessionFormat(obj: io.flow.session.v0.models.SessionFormat): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "currency" -> jsObjectSessionCurrencyFormat(obj.currency)
      )
    }

    implicit def jsonWritesSessionSessionFormat: play.api.libs.json.Writes[SessionFormat] = {
      (obj: io.flow.session.v0.models.SessionFormat) => {
        jsObjectSessionFormat(obj)
      }
    }

    implicit def jsonReadsSessionSessionGeo: play.api.libs.json.Reads[SessionGeo] = {
      for {
        country <- (__ \ "country").read[io.flow.reference.v0.models.Country]
        currency <- (__ \ "currency").read[io.flow.reference.v0.models.Currency]
        language <- (__ \ "language").read[io.flow.reference.v0.models.Language]
        locale <- (__ \ "locale").read[io.flow.reference.v0.models.Locale]
      } yield SessionGeo(country, currency, language, locale)
    }

    def jsObjectSessionGeo(obj: io.flow.session.v0.models.SessionGeo): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "country" -> io.flow.reference.v0.models.json.jsObjectCountry(obj.country),
        "currency" -> io.flow.reference.v0.models.json.jsObjectCurrency(obj.currency),
        "language" -> io.flow.reference.v0.models.json.jsObjectLanguage(obj.language),
        "locale" -> io.flow.reference.v0.models.json.jsObjectLocale(obj.locale)
      )
    }

    implicit def jsonWritesSessionSessionGeo: play.api.libs.json.Writes[SessionGeo] = {
      (obj: io.flow.session.v0.models.SessionGeo) => {
        jsObjectSessionGeo(obj)
      }
    }

    implicit def jsonReadsSessionSessionPutForm: play.api.libs.json.Reads[SessionPutForm] = {
      for {
        ip <- (__ \ "ip").readNullable[String]
        experience <- (__ \ "experience").readNullable[String]
        country <- (__ \ "country").readNullable[String]
        currency <- (__ \ "currency").readNullable[String]
        language <- (__ \ "language").readNullable[String]
        locale <- (__ \ "locale").readNullable[String]
        attributes <- (__ \ "attributes").readNullable[Map[String, String]]
      } yield SessionPutForm(ip, experience, country, currency, language, locale, attributes)
    }

    def jsObjectSessionPutForm(obj: io.flow.session.v0.models.SessionPutForm): play.api.libs.json.JsObject = {
      (obj.ip match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("ip" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.experience match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("experience" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.currency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("currency" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.language match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("language" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.locale match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("locale" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.attributes match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("attributes" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesSessionSessionPutForm: play.api.libs.json.Writes[SessionPutForm] = {
      (obj: io.flow.session.v0.models.SessionPutForm) => {
        jsObjectSessionPutForm(obj)
      }
    }

    implicit def jsonReadsSessionSessionVisit: play.api.libs.json.Reads[SessionVisit] = {
      for {
        id <- (__ \ "id").read[String]
        expiresAt <- (__ \ "expires_at").read[_root_.org.joda.time.DateTime]
      } yield SessionVisit(id, expiresAt)
    }

    def jsObjectSessionVisit(obj: io.flow.session.v0.models.SessionVisit): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "expires_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.expiresAt))
      )
    }

    implicit def jsonWritesSessionSessionVisit: play.api.libs.json.Writes[SessionVisit] = {
      (obj: io.flow.session.v0.models.SessionVisit) => {
        jsObjectSessionVisit(obj)
      }
    }

    implicit def jsonReadsSessionSessionVisitor: play.api.libs.json.Reads[SessionVisitor] = {
      (__ \ "id").read[String].map { x => new SessionVisitor(id = x) }
    }

    def jsObjectSessionVisitor(obj: io.flow.session.v0.models.SessionVisitor): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesSessionSessionVisitor: play.api.libs.json.Writes[SessionVisitor] = {
      (obj: io.flow.session.v0.models.SessionVisitor) => {
        jsObjectSessionVisitor(obj)
      }
    }

    implicit def jsonReadsSessionSession: play.api.libs.json.Reads[Session] = (js: play.api.libs.json.JsValue) => {
      def readDiscriminator(discriminator: String) = {
        discriminator match {
          case "organization_session" => js.validate[io.flow.session.v0.models.OrganizationSession]
          case other => play.api.libs.json.JsSuccess(io.flow.session.v0.models.SessionUndefinedType(other))
        }
      }
      (js \ "discriminator").validate[String] match {
        case e: play.api.libs.json.JsError => e
        case s: play.api.libs.json.JsSuccess[String] => readDiscriminator(s.value)
      }
    }

    def jsObjectSession(obj: io.flow.session.v0.models.Session): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.session.v0.models.OrganizationSession => jsObjectOrganizationSession(x)
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesSessionSession: play.api.libs.json.Writes[Session] = {
      (obj: io.flow.session.v0.models.Session) => {
        jsObjectSession(obj)
      }
    }

    implicit def jsonReadsSessionSessionAuthorization: play.api.libs.json.Reads[SessionAuthorization] = (js: play.api.libs.json.JsValue) => {
      def readDiscriminator(discriminator: String) = {
        discriminator match {
          case "organization_session_authorization" => js.validate[io.flow.session.v0.models.OrganizationSessionAuthorization]
          case other => play.api.libs.json.JsSuccess(io.flow.session.v0.models.SessionAuthorizationUndefinedType(other))
        }
      }
      (js \ "discriminator").validate[String] match {
        case e: play.api.libs.json.JsError => e
        case s: play.api.libs.json.JsSuccess[String] => readDiscriminator(s.value)
      }
    }

    def jsObjectSessionAuthorization(obj: io.flow.session.v0.models.SessionAuthorization): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.session.v0.models.OrganizationSessionAuthorization => jsObjectOrganizationSessionAuthorization(x)
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesSessionSessionAuthorization: play.api.libs.json.Writes[SessionAuthorization] = {
      (obj: io.flow.session.v0.models.SessionAuthorization) => {
        jsObjectSessionAuthorization(obj)
      }
    }
  }
}

package io.flow.session.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.session.v0 {

  object Constants {

    val Namespace = "io.flow.session.v0"
    val UserAgent = "apibuilder 0.15.33 app.apibuilder.io/flow/session/latest/play_2_8_client"
    val Version = "0.10.75"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.session.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.experience.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.reference.v0.models.json._
    import io.flow.session.context.v0.models.json._
    import io.flow.session.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.session.v0.Client")

    logger.info(s"Initializing io.flow.session.v0.Client for url $baseUrl")

    def sessionAuthorizations: SessionAuthorizations = SessionAuthorizations

    def sessions: Sessions = Sessions

    object SessionAuthorizations extends SessionAuthorizations {
      override def post(
        sessionAuthorizationForm: io.flow.session.v0.models.SessionAuthorizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.SessionAuthorization] = {
        val payload = play.api.libs.json.Json.toJson(sessionAuthorizationForm)

        _executeRequest("POST", s"/authorizations/sessions", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.SessionAuthorization", r, _.validate[io.flow.session.v0.models.SessionAuthorization])
          case r if r.status == 401 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.session.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }
    }

    object Sessions extends Sessions {
      override def getBySession(
        session: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session] = {
        _executeRequest("GET", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.Session", r, _.validate[io.flow.session.v0.models.Session])
          case r if r.status == 404 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def postOrganizationsByOrganization(
        organization: String,
        sessionForm: io.flow.session.v0.models.SessionForm,
        context: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.OrganizationSession] = {
        val payload = play.api.libs.json.Json.toJson(sessionForm)

        val queryParameters = Seq(
          context.map("context" -> _)
        ).flatten

        _executeRequest("POST", s"/sessions/organizations/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}", body = Some(payload), queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.OrganizationSession", r, _.validate[io.flow.session.v0.models.OrganizationSession])
          case r if r.status == 422 => throw io.flow.session.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 422")
        }
      }

      override def putOrganizationsBySessionAndOrganization(
        session: String,
        organization: String,
        sessionPutForm: io.flow.session.v0.models.SessionPutForm,
        context: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.OrganizationSession] = {
        val payload = play.api.libs.json.Json.toJson(sessionPutForm)

        val queryParameters = Seq(
          context.map("context" -> _)
        ).flatten

        _executeRequest("PUT", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}/organizations/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}", body = Some(payload), queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.OrganizationSession", r, _.validate[io.flow.session.v0.models.OrganizationSession])
          case r if r.status == 422 => throw io.flow.session.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 422")
        }
      }

      override def putBySession(
        session: String,
        sessionPutForm: io.flow.session.v0.models.SessionPutForm,
        context: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session] = {
        val payload = play.api.libs.json.Json.toJson(sessionPutForm)

        val queryParameters = Seq(
          context.map("context" -> _)
        ).flatten

        _executeRequest("PUT", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}", body = Some(payload), queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.Session", r, _.validate[io.flow.session.v0.models.Session])
          case r if r.status == 404 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.session.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404, 422")
        }
      }

      override def putResetBySession(
        session: String,
        sessionPutForm: io.flow.session.v0.models.SessionPutForm,
        context: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session] = {
        val payload = play.api.libs.json.Json.toJson(sessionPutForm)

        val queryParameters = Seq(
          context.map("context" -> _)
        ).flatten

        _executeRequest("PUT", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}/reset", body = Some(payload), queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.Session", r, _.validate[io.flow.session.v0.models.Session])
          case r if r.status == 404 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.session.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404, 422")
        }
      }

      override def putClearBySession(
        session: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session] = {
        _executeRequest("PUT", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}/clear", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.Session", r, _.validate[io.flow.session.v0.models.Session])
          case r if r.status == 404 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.session.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404, 422")
        }
      }

      override def deleteBySession(
        session: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    ): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq("Content-Type" -> "application/json; charset=UTF-8")
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.session.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def sessionAuthorizations: io.flow.session.v0.SessionAuthorizations
      def sessions: io.flow.session.v0.Sessions
    }

  }

  trait SessionAuthorizations {
    def post(
      sessionAuthorizationForm: io.flow.session.v0.models.SessionAuthorizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.SessionAuthorization]
  }

  trait Sessions {
    def getBySession(
      session: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session]

    /**
     * @param context The session context
     */
    def postOrganizationsByOrganization(
      organization: String,
      sessionForm: io.flow.session.v0.models.SessionForm,
      context: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.OrganizationSession]

    /**
     * @param context The session context
     */
    def putOrganizationsBySessionAndOrganization(
      session: String,
      organization: String,
      sessionPutForm: io.flow.session.v0.models.SessionPutForm,
      context: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.OrganizationSession]

    /**
     * @param context The session context
     */
    def putBySession(
      session: String,
      sessionPutForm: io.flow.session.v0.models.SessionPutForm,
      context: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session]

    /**
     * Resets the session based on the provided geo parameters.
     *
     * @param context The session context
     */
    def putResetBySession(
      session: String,
      sessionPutForm: io.flow.session.v0.models.SessionPutForm,
      context: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session]

    /**
     * Clears the session geo parameters
     */
    def putClearBySession(
      session: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session]

    def deleteBySession(
      session: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.experience.v0.models.json._
    import io.flow.permission.v0.models.json._
    import io.flow.reference.v0.models.json._
    import io.flow.session.context.v0.models.json._
    import io.flow.session.v0.models.json._

    final case class GenericErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(s"${response.status}: ${response.body}")) {
      lazy val genericError = _root_.io.flow.session.v0.Client.parseJson("io.flow.error.v0.models.GenericError", response, _.validate[io.flow.error.v0.models.GenericError])
    }

    final case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}