/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.10.75
 * apibuilder 0.15.33 app.apibuilder.io/flow/channel/latest/play_2_8_mock_client
 */
package io.flow.channel.v0.mock {

  trait Client extends io.flow.channel.v0.interfaces.Client {

    val baseUrl: String = "http://mock.localhost"

    override def channels: io.flow.channel.v0.Channels = MockChannelsImpl
    override def channelOrganizations: io.flow.channel.v0.ChannelOrganizations = MockChannelOrganizationsImpl

  }

  object MockChannelsImpl extends MockChannels

  trait MockChannels extends io.flow.channel.v0.Channels {

    /**
     * Returns the list of channels
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "name",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.channel.v0.models.Channel]] = scala.concurrent.Future.successful {
      Nil
    }

    /**
     * Returns a channel by id
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.Channel] = scala.concurrent.Future.successful {
      io.flow.channel.v0.mock.Factories.makeChannel()
    }

    def post(
      channelForm: io.flow.channel.v0.models.ChannelForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.Channel] = scala.concurrent.Future.successful {
      io.flow.channel.v0.mock.Factories.makeChannel()
    }

    /**
     * Upserts the channel data, channel is identified by id
     */
    def putById(
      id: String,
      channelForm: io.flow.channel.v0.models.ChannelForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.Channel] = scala.concurrent.Future.successful {
      io.flow.channel.v0.mock.Factories.makeChannel()
    }

    /**
     * Deletes a channel specified by id
     */
    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = scala.concurrent.Future.successful {
      // unit type
    }

  }

  object MockChannelOrganizationsImpl extends MockChannelOrganizations

  trait MockChannelOrganizations extends io.flow.channel.v0.ChannelOrganizations {

    /**
     * Returns the list of organizations in a channel, channel is identified by id
     */
    def get(
      channelId: String,
      id: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.channel.v0.models.ChannelOrganization]] = scala.concurrent.Future.successful {
      Nil
    }

    /**
     * Returns a particular organization in a channel, channel is identified by id and
     * organization by id
     */
    def getById(
      channelId: String,
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.ChannelOrganization] = scala.concurrent.Future.successful {
      io.flow.channel.v0.mock.Factories.makeChannelOrganization()
    }

    /**
     * Upserts an organization in the channel identified by id
     */
    def putById(
      channelId: String,
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.channel.v0.models.ChannelOrganization] = scala.concurrent.Future.successful {
      io.flow.channel.v0.mock.Factories.makeChannelOrganization()
    }

    /**
     * Deletes an organization specified by id inside of a channel specified by id
     */
    def deleteById(
      channelId: String,
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = scala.concurrent.Future.successful {
      // unit type
    }

  }

  object Factories {

    def randomString(length: Int = 24): String = {
      _root_.scala.util.Random.alphanumeric.take(length).mkString
    }

    def makeChannel(): io.flow.channel.v0.models.Channel = io.flow.channel.v0.models.Channel(
      id = Factories.randomString(24),
      name = Factories.randomString(24)
    )

    def makeChannelForm(): io.flow.channel.v0.models.ChannelForm = io.flow.channel.v0.models.ChannelForm(
      name = Factories.randomString(24)
    )

    def makeChannelOrganization(): io.flow.channel.v0.models.ChannelOrganization = io.flow.channel.v0.models.ChannelOrganization(
      id = Factories.randomString(24),
      organization = io.flow.common.v0.mock.Factories.makeOrganizationReference(),
      channel = io.flow.channel.v0.mock.Factories.makeChannelReference()
    )

    def makeChannelReference(): io.flow.channel.v0.models.ChannelReference = io.flow.channel.v0.models.ChannelReference(
      id = Factories.randomString(24)
    )

  }

}